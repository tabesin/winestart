#! /bin/bash

## License:
#   This program is free software; you can redistribute it and/or
#   modify it under the terms of the GNU Lesser General Public
#   License as published by the Free Software Foundation; either
#   version 2.1 of the License, or (at your option) any later
#   version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU Lesser General Public License for more details.
#
#   You should have received a copy of the GNU Lesser General Public
#   License along with this program.  If not, see
#   <https://www.gnu.org/licenses/>.
#
## You can redistribute it as you wish : GPL v3
## author : wildtruc@noneltd.net

## You can place the script everywhere, but /usr/local/bin is still the best
## You can rename the script as you wish
## usage : winestart CONFIGFILE 

## define per game conf files dir
#scpt_dir=$HOME/.user_scripts
scpt_dir=$HOME/.winestarter
w_tricks=$(find /usr/{bin,local/bin} -name winetricks)
yad_bin=$(find /usr/{bin,local/bin} -name yad)
zen_bin=$(find /usr/{bin,local/bin} -name zenity)
convert_bin=$(find /usr/{bin,local/bin} -name convert)
wrestool_bin=$(find /usr/{bin,local/bin} -name wrestool)
strings_bin=$(find /usr/{bin,local/bin} -name strings)
rpm_bin=$(find /usr/{bin,local/bin} -name rpm2cpio)

wine_bin='wine'
wineboot_bin='wineboot'
conf=$1

## create the user script conf directory if it doesn't exist
[ -d $scpt_dir ]|| mkdir -p $scpt_dir
## Is per game specific wine conf file exist ?
[ -n $scpt_dir/configs/$conf ]|| exit 0
config_file=$scpt_dir/configs/$conf
 . $scpt_dir/configs/$conf
 . $scpt_dir/color.conf

[[ $auto_set ]]|| auto_set=0
[[ $set_desktop_env ]]|| set_desktop_env=0
[[ $use_optimus ]]|| use_optimus=0
[[ $use_winepath ]]|| use_winepath=0
[[ $w_install_tricks ]]|| w_install_tricks=0
[[ $w_install_exe ]]|| w_install_exe=0
[[ $w_config ]]|| w_config=0
##define user home desktop directory
if [ -e $HOME/.config/user-dirs.dirs ]; then
	. $HOME/.config/user-dirs.dirs
fi
#DESK_DIR=$(cat $HOME/.config/user-dirs.dirs| grep "XDG_DESKTOP_DIR"| \
#sed -n "s|\"||g;s|\$HOME|$HOME|p")
#DESK_DIR=("$DESK_DIR")
#DESK_DIR=("$XDG_DESKTOP_DIR")
## yad fonts colors
vb='<span color="'$main'" weight="bold" font="'$font0' '$size0'">'
vn='<span color="'$main'" weight="normal" font="'$font0' '$size0'">'
rb='<span color="'$warn'" weight="bold" font="'$font0' '$size0'">'
gb='<span color="'$freeze'" weight="bold" font="'$font0' '$size0'">'
bf='<span color="'$main'" weight="bold" font="'$font1' '$size1'">'
brf='<span color="'$warn'" weight="bold" font="'$font1' '$size1'">'
nf='<span weight="bold" font="'$font0' '$size0'">'
end='</span>'

## yad warning messages
png_stock=$HOME/.winestarter/png/defaults
filesave=$png_stock/'wine-install48.png'
warning=$png_stock/'wine-warn48.png'
inform=$png_stock/'wine-info48.png'
# text=""; dialog_list="$text;gtk-close;$inform"; yad_warnings
yad_warning(){
#	d_txt=$(printf "$dialog_list"|cut -d';' -f1)
	d_btt=$(printf "$dialog_list"|cut -d';' -f1)
	d_img=$(printf "$dialog_list"|cut -d';' -f2)
	w_width=500
	if [ $yad_bin ]; then
		$yad_bin --width=$w_width --height=$(($w_width/3)) --title "" --borders 15 --button="$d_btt":1 \
		--image=$d_img --text="$text" --timeout=3
#	$yad_bin --width=400 --height=100 --title "" --button="$d_btt":1 \
#	--image=$d_img --timeout=3 --form --field="$text":LBL ''
	else
		[ $zen_bin ]&& zen_warning
	fi
#	zenity --height=150 --title='' --warning --window-icon=$d_img --text="$text" --timeout=3
}
zen_warning(){
	d_btt=$(printf "$dialog_list"|cut -d';' -f1)
	d_img=$(printf "$dialog_list"|cut -d';' -f2)
	div=$(printf "$dialog_list"|cut -d';' -f3)
	w_width=400 ; w_height=$(($w_width/$div))
	$zen_bin --width=$w_width --height=$w_height --title='' --warning --window-icon="$d_img" \
	 --timeout=4 --text="$text"
}
## optimus special sets
fn_optimus(){
	export vblank_mode=$opti_VBLK
	export PRIMUS_SYNC=$opti_SYNC
	if [[ $opti_starter != primusrun ]]; then opti_opt='-b '; fi
	opti_run="$opti_starter $opti_opt$opti_accel"
}
## additional function for wine process
fn_regedit(){
	if ! [ -e $user_prefix/$bottle_prefix/$reg_file ]; then
		printf "REGEDIT4\n\n$user_reg\n" > $user_prefix/$bottle_prefix/$reg_file
#		if [[ $(cat -n $user_prefix/$bottle_prefix/$reg_file| sed -n '$p'|awk '{print $1}') -ge 3 ]]; then
		if [[ $(cat -n $user_prefix/$bottle_prefix/$reg_file| grep -c .) -ge 3 ]]; then
#			printf "boom!\n"
			$wine_bin regedit $user_prefix/$bottle_prefix/$reg_file
			$wine_bin_path$wineboot_bin -r
		else
			IFS=$ifs ; exit 0
		fi
	else
		previous_reg=$user_prefix/$bottle_prefix/$reg_file
		printf "REGEDIT4\n\n$user_reg\n" > $user_prefix/$bottle_prefix/$reg_file.new
		new_reg=$user_prefix/$bottle_prefix/$reg_file.new
		
		if [ $(diff -q $previous_reg $new_reg| grep -c .) -gt 0 ]; then
			if [ $(cat $user_prefix/$bottle_prefix/$reg_file.new| grep -c .) -gt 0 ]; then
#				$wine_bin regedit -D HKEY_CURRENT_USER\\Software\\Wine\\Direct3D
				printf "REGEDIT4\n\n$user_reg\n" > $user_prefix/$bottle_prefix/$reg_file			
				$wine_bin regedit $user_prefix/$bottle_prefix/$reg_file
			else
				$wine_bin regedit -D HKEY_CURRENT_USER\\Software\\Wine\\Direct3D
				printf "" > $user_prefix/$bottle_prefix/$reg_file
			fi
		fi
		$wine_bin_path$wineboot_bin -r
		rm -f $user_prefix/$bottle_prefix/$reg_file.new
		
#		previous_reg=$(( $(cat $user_prefix/$bottle_prefix/$reg_file| grep -c .)+1 ))
#		new_reg=$(printf "$user_reg"|grep -c .)
#		video_chk_prev=$(cat $user_prefix/$bottle_prefix/$reg_file| egrep "(^.*Video*)"| grep -o "[0-9]*")
#		video_chk_new=$(printf "$user_reg"| egrep "(^.*Video*)"| grep -o "[0-9]*" )
##		if [ $user_prefix/$bottle_prefix/$reg_file ]
#		if [ "$video_chk_prev" != '' -o "$video_chk_new" != '' ]; then
#			if [ $video_chk_new -ne $video_chk_prev ]; then
#				new_reg=$(($new_reg+1))
#			fi
#		fi
#		if [ $new_reg -ne $(($previous_reg-2)) ]; then
##		if [ $new_reg -ne $previous_reg ]; then
#			if [ $new_reg -gt 0 ]; then
##				$wine_bin regedit -D HKEY_CURRENT_USER\\Software\\Wine\\Direct3D
#				printf "REGEDIT4\n\n$user_reg\n" > $user_prefix/$bottle_prefix/$reg_file
##				$wine_bin regedit -D HKEY_CURRENT_USER\\Software\\Wine\\Direct3D
#				$wine_bin regedit $user_prefix/$bottle_prefix/$reg_file
#			else
#				$wine_bin regedit -D HKEY_CURRENT_USER\\Software\\Wine\\Direct3D
#				printf "" > $user_prefix/$bottle_prefix/$reg_file
#			fi
#		fi
	fi
}
fn_mime_asso(){
	## convert conf coma separated data in usable list.
	mime_type_list=( $(printf "$local_association"| tr ',' '\n') )
	if [ ${#mime_type_list[@]} -gt 0 ]; then
	mime_log=$user_prefix/$bottle_prefix/mime_install.log
	## create temp file only if type list is not empty.
	reg_temp=$(mktemp --tmpdir mime.XXXXXXXX)
	## loop on conf list, check and set if available.
		for type in ${mime_type_list[@]}; do
			mime_def=$(cat $scpt_dir/resources/mime-type.lst| grep "^$type")
			if [ $(printf "$mime_def"| grep -c .) -gt 0 ]; then
				file_type=$(printf "$mime_def"| cut -d':' -f1)
				doc_type=$(printf "$mime_def"| cut -d':' -f2)
				mime_type=$(printf "$mime_def"| cut -d':' -f3)
				## controL if file type is not already setted
				if [ $(cat $mime_log| grep -c "^$file_type") -eq 0 ]; then
					## create the reg file from the collected vars
					reg_base="REGEDIT4

[HKEY_CLASSES_ROOT\\.$file_type]
@=\"$doc_type\"
\"Content Type\"=\"$mime_type\"
[HKEY_CLASSES_ROOT\\$doc_type\\Shell\\Open\\command]
@=\"winebrowser \\\"%1\\\"\""
					echo "$reg_base" &> $reg_temp
					## launch wine regedit on reg temp file setted.
					$wine_bin regedit $reg_temp
					## send newly installed report to bottle mime install log
					printf "$file_type,$doc_type\n" >> $mime_log
					## wipe and go to the next loop variable.
				fi
			fi
		done
		$wine_bin_path$wineboot_bin -r
		rm -f $reg_temp
	fi
}
fn_reg_dlls(){
	if [[ "$dll_reg_manager" ]]; then
		if [ $(printf "$dll_reg_manager"| grep -c .) -gt 0 ]; then
			reg_type=$(printf "$dll_reg_manager"| cut -d',' -f1)
			reg_elf=$(printf "$dll_reg_manager"| cut -d',' -f2)
			reg_dlls=$(printf "$dll_reg_manager"| cut -d',' -f3-)
			if [ $reg_type = 1 ]; then reg_opt='/u'; else reg_opt=''; fi
			if [ $elf = 64 ]; then
				if [ $reg_elf = 2 ]; then
					reg_sys=("system32" "syswow64")
				else
					if [ $reg_elf = 0 ]; then reg_sys=("syswow64"); else reg_sys=("system32"); fi
				fi
			else
				if [ $reg_elf -gt 0 ]; then	
					echo "# Wrong system arch. DLLs will by registering to 32bits."
				fi
				reg_sys=("system32")
			fi
			reg_log=$user_prefix/$bottle_prefix/dlls_reg.log
			reg_dlls=( "$(echo "$reg_dlls"| tr ',' '\n')" )
			if ! [ -s $reg_log ]; then touch $reg_log; fi
			for t_arch in ${reg_sys[@]}; do 
				for t_dll in ${reg_dlls[@]}; do
					if [ $(cat $reg_log| egrep -c "$t_arch,$t_dll" ) -eq 0 ]; then
						printf "$t_arch,$t_dll\n" >> $reg_log
						$wine_bin regsvr32 $reg_opt C:\\windows\\$t_arch\\$t_dll
					fi
				done
			done
			$wine_bin_path$wineboot_bin -r
		fi
	fi
}
fn_download_ui(){
	if [ $dl_installer = 1 ]; then
		dl_cmd(){ wget -O $dl_dir/$pack_name $pkgs 2>&1; }
	else
		dl_cmd(){ wget $pkgs $dl_dir/ 2>&1; }
	fi
	## This perl regex Analyse and parse wget stdout field, then display it in a yad window
	track(){ perl -p -e "$| = 1; s/^.* +([0-9]+%) +([0-9,.]+[GMKB]) +([0-9hms,.]+).*$/\1\n# $pack_name [\1] time left: \3\t\2\/s/"; }
#	site=$(printf "$pkgs"| sed -n "s/\(^.*\/\/\)\(.*\.\w*[a-z]\)\/*.*$/\2/p")
	pkg_ext=$(printf "$pkgs"| sed -n "s/^.*\.//p")
#	site=$(printf "$pkgs"| sed -n -E "s/(^.*\/\/)(.*\.\w*[a-z])\/*.*\.(w*$pkg_ext)$/\2/p")
	site=$(printf "$pkgs"| sed -E -n "s/(^.*:\/\/)(\w+)\.(\w+)\.(\w+)\/.*$/\2.\3.\4/p")
	pack=$(printf "$pkgs"| sed -n "s/^.*\///p")
#	w_text="$vb\\Downloading $pack from $site server.$end"
	w_text="Downloading from $site server."
	## yad progress bar
#	dl_cmd | track | $yad_bin --width=550 --title "$w_title" --text="$w_text" \
#	--window-icon=filesave --image=$filesave --progress --auto-close
#	dl_cmd | track | $zen_bin --width=550 --title "$w_title" --text="$w_text" \
	dl_cmd | track | $zen_bin --width=550 --title "$w_text" \
	--window-icon=filesave --progress --auto-close --no-cancel
}
fn_use_winepath(){
	unset dl_list os_version
	## create tmp dir for package download
	dl_dir=$(mktemp --tmpdir -d wine_dl.XXXXXXXX)	
	pkg_ver=$(printf $wine_ver| cut -d'-' -f1)
	pkg_rel=$(printf $wine_ver| cut -d'-' -f2)
	
	download_list(){
		wget -O $file_temp $dl_address/
		os_version=$(tac $file_temp | egrep -o "indexcolname.*href=\"[0-9]{2}\/\""| \
		sed -En "s/^.*([0-9]{2}).*$/\1/p")
	
		for os_v in ${os_version[@]}; do
			wget -O $file_temp.[$os_v] $dl_address/$os_v/$http_elf/
			dl_bin_list[$os_v]=$(tac $file_temp.[$os_v]| egrep "wine-staging$b_elf-[0-9]+"| \
			sed -En "s/^.*$b_elf-([0-9]\.[0-9]*)-([0-9]).$http_elf.*$/\1-\2-staging,$os_v/p")
			if [ $os_v_p ]; then
				if [ $os_v -ne $os_v_p ]; then
					new_output=$(echo "${dl_bin_list[$os_v]}"| cut -d',' -f1)
					prev_output=$(echo "${dl_bin_list[$os_v_p]}"| cut -d',' -f1)
					_diff=$(echo "$new_output"| grep -vc "$prev_output")
					if [ $_diff -gt 0 ]; then
						_added=$(echo "${dl_bin_list[$os_v]}"| grep -v "$prev_output")
						dl_bin_list[$os_v]=$(echo -e "${dl_bin_list[$os_v_p]}\n$_added")
						dl_final_list=${dl_bin_list[$os_v]}
					fi
					os_v_p=$os_v
				fi
			else
				os_v_p=$os_v
			fi
		done
#		dist_dl_ver=$(echo "$dl_final_list"| grep "$wine_ver"| cut -d',' -f2)
		echo "$dl_final_list"| grep "$wine_ver"| cut -d',' -f2 > $file_temp.[stamp]
	}
	if [ $wine_elf = 1 ]; then ftp_elf='amd64'; b_elf='64'; else ftp_elf='x86'; b_elf=''; fi
	if ! [ -n $wine_path/$ftp_elf ]; then mkdir -p $HOME/.winebin/$ftp_elf; fi
	if [ -d $wine_path/$ftp_elf/$wine_ver ]; then
		_use_winepath_env=1
	else
		w_title="Winestarter"
		
		## control if wine bin dir exist. If not create it from default
		if ! [ -d $wine_path/$ftp_elf/ ]; then mkdir -p $wine_path/$ftp_elf; fi
		## create the download list to fill in the yad loop.
		if [ $wine_pack = 0 ]; then
			dl_address_0="http://wine.playonlinux.com/binaries/linux-$ftp_elf"
			dl_pkg=PlayOnLinux-wine-$wine_ver-linux-$ftp_elf.pol
			dl_list=( "$dl_address_0/$dl_pkg" )
			unpack_list=( $dl_pkg )
		else
			if [ $wine_elf = 1 ]; then http_elf='x86_64'; b_elf='64'; else http_elf='i686'; b_elf=''; fi
			
			file_temp=$(mktemp --tmpdir ftp.XXXXXXXX)
			dl_address="https://dl.winehq.org/wine-builds/fedora"
			dl_text="$vb\\Building WineHQ packages repository list.$end"
			
#			$zen_bin --width=550 --title "$w_title" --window-icon=filesave \
#			--progress --pulsate --auto-close --no-cancel --text="$dl_text" &
#			WAIT_UI=$(ps -A | grep "zenity" | awk '{print $1}'| sed -n '1p')
#			download_list
			
			download_list | $zen_bin --width=550 --title "$w_title" --text="$dl_text" \
			--window-icon=filesave --progress --pulsate --auto-close --no-cancel
			dist_dl_ver=$(cat $file_temp.[stamp])
			
#			echo "$dl_final_list"			
			
#			dist_dl_ver=$(echo "$dl_final_list"| grep "$wine_ver"| cut -d',' -f2)
			dl_address_0="$dl_address/$dist_dl_ver/$http_elf"
			dl_address_1="$dl_address/$dist_dl_ver/i686"
#			dl_address_0="https://dl.winehq.org/wine-builds/fedora/25/$http_elf"
#			dl_address_1="https://dl.winehq.org/wine-builds/fedora/25/i686"
			dl_list=(
				"$dl_address_0/wine-staging$b_elf-$pkg_ver-$pkg_rel.$http_elf.rpm"
				"$dl_address_1/wine-staging-common-$pkg_ver-$pkg_rel.i686.rpm"
			)
			unpack_list=(
				"wine-staging$b_elf-$pkg_ver-$pkg_rel.$http_elf.rpm"
				"wine-staging-common-$pkg_ver-$pkg_rel.i686.rpm"
			)
		fi
		kill $WAIT_UI
		cd $dl_dir
		for pkgs in ${dl_list[@]}; do
			dl_installer=0
			pack_name=$wine_ver
			fn_download_ui
		done

		for dwld in ${unpack_list[@]}; do
			if [ $wine_pack = 0 ]; then 
				un_tar(){ tar -xf $dwld; }
			else
				un_tar(){ $rpm_bin $dwld | cpio -id; }
			fi
			if [ $(ls -1 $dl_dir| egrep -c "$pkg_ver") -gt 0 ]; then
			e_text="$vb\\Extracting $dwld to $wine_path.$end"
#			$yad_bin --width=550 --title "$w_title" --text-align=center --no-buttons \
#			--window-icon=filesave --progress --pulsate --auto-close --text="$e_text"  --progress-text="" &
#			WAIT_UI=$(ps -A | grep "yad" | awk '{print $1}'| sed -n '1p')
			$zen_bin --width=550 --title "$w_title" --window-icon=filesave \
			--progress --pulsate --auto-close --no-cancel --text="$e_text" &
			WAIT_UI=$(ps -A | grep "zenity" | awk '{print $1}'| sed -n '1p')
#			un_tar | $yad_bin --width=500 --title "$w_title" --text-align=center --no-buttons\
#			--window-icon=filesave --progress --pulsate --auto-close --text="$e_text" --progress-text=""
			un_tar
			kill $WAIT_UI
			_use_winepath_env=1
			else
				echo -e "»»»» Downloaded package missing. Using defautl Wine."
				if [ $zen_bin ]; then
					text="$bf\\Downloaded package missing$end$vb.\nUsing system default Wine$end"
					dialog_list="gtk-close;$warning;4"; zen_warning
				fi
			fi
		done
		
		if [ $wine_pack = 0 ]; then
			cp -Rf wineversion/$wine_ver/ $wine_path/$ftp_elf
		else
			mkdir -p $wine_path/$ftp_elf/$wine_ver/
			cp -Rf opt/wine-staging/* $wine_path/$ftp_elf/$wine_ver/
#			if [ $b_elf = 64 ]; then ln -sf $wine_path/$ftp_elf/$wine_ver $wine_path/x86/; fi
			if [ $b_elf = 64 ]; then cd $wine_path/x86; ln -sf ../$ftp_elf/$wine_ver ; fi
		fi
	fi
	
}
fn_install_tricks(){
#	unset new_tricks_list
	unset diff_tricks
	i_list_file=$user_prefix/$bottle_prefix/tricks_install.log
	w_list_file=$user_prefix/$bottle_prefix/winetricks.log
	w_tricks_reserve=$scpt_dir/resources/tricks_workaround.txt
	
	## winestarter has its own wintricks binary, but some weird thibgs happens some time, so
	## let's check if it is really in system tree, esle exit.
	if [ -x $w_tricks ]; then
	## set the dlls list to install.
		## check winetricks workaround list for winetricks log filtering
		if ! [ -s $w_tricks_reserve ]; then
			$w_tricks settings list|sed -n "/^---/,/---$/d;p"| egrep -v "^Using.*$"|awk '{print $1}' \
			>$w_tricks_reserve
		fi
		## set filters from winetricks settings list command.
		w_filters=$(cat $w_tricks_reserve| tr '\n' '|')'w_workaround'
		tmp_log=$(mktemp --tmpdir log1.XXXXXXXX)
		## set w_tricks_list readable for diff.
		_w_tricks_list=$(echo "$w_tricks_list"| tr ',' '\n')

		if [ -s $w_list_file ]; then
			## sort winetricks log alphabetiquely to avoir mistakes, if any.
			_w_list_file=$(cat $w_list_file| egrep -v "$w_filters")
			echo "$_w_list_file"| sort -bd >$tmp_log
			if [ $(echo "$_w_tricks_list"| grep -c .) -gt 0 ]; then
				## find diff between w_tricks_list and already installed.
				diff_tricks=$(echo "$_w_tricks_list"| grep -vFf "$tmp_log")
				w_tricks_loop=( $diff_tricks )
			fi
		else
			w_tricks_loop=( $(echo "$w_tricks_list"| tr ',' '\n') )
		fi
		## now, let's do winetricks job
		## Check that tricks install process is set to 'on' and take w_install_tricks is not empty.
		## else, send error and exit.
		if [ $w_install_tricks -gt 0 ]; then
			if [ ${#w_tricks_loop[@]} -gt 0 ]; then
	#			if [ "$w_tricks_list" ]; then
				e_text="$vb\\Winetricks is working$end"		
				(for w_list in "${w_tricks_loop[@]}"; do
					echo "# Installing $w_list"
					$w_tricks $w_tricks_opts $w_list
				done
	#				)| $yad_bin --width=250 --title "$w_title" --text-align=center --text="$e_text" \
	#				--window-icon=filesave --progress --pulsate --auto-close --no-buttons
				)| $zen_bin --width=250 --title="$w_title" --text="$e_text" \
				--window-icon=filesave --progress --pulsate --auto-close --no-cancel
	#				perl -ni -pe "s|(w_install_tricks)=[0-9]|\1=0|i" $config_file
				if [ -s $w_list_file ]; then
					## analyse winetricks log again to get newly installed dlls.
					cat $w_list_file| egrep -v "$w_filters"| sort -bd > $tmp_log
					## ensure all dlls are installed, else, display error/info message.
					diff_logs=$(echo "$_w_tricks_list"| grep -vFf "$tmp_log")
					if [[ $diff_logs != '' ]]; then
						warn_msg=$(echo "$diff_logs"| tr '\n' ','| sed -n "s/,$//g;p")
						echo -e "»»»» DLLs install error. $warn_msg are missing or won't install.\n»»»» See config file w_tricks_list field or try to launch winestarter again."
						if [ $zen_bin ]; then
							text="$bf\\DLLs install error$end$vb.\n$warn_msg are missing or won't install.\nLook at $config_file or try to launch Winestarter again$end"
							dialog_list="gtk-close;$warning;4"; zen_warning
						fi
					fi
					## finaly, replace old w_tricks_list by tne new one in config.
					_new_tricks=$(cat $tmp_log| tr '\n' ','| sed -n "s/,$//p")
					sed -ni "s|^w_tricks_list=\"\(.*\)\"$|w_tricks_list=\"\1,$_new_tricks\"|i;p" $config_file
				fi
			else
				echo -e "»»»» Winetricks install list is empty.\n»»»» Don't to set up Winetricks dlls install when DLLs list is empty."
				if [ $zen_bin ]; then
					text="$bf\\Winetricks install list is empty$end$vb.Don't to set up Winetricks dlls install when DLLs list is empty\n$end"
					dialog_list="gtk-close;$warning;4"; zen_warning
				fi
				exit 0
			fi
		fi
	else
		echo -e "»»»» Winetricks was not found, install it first."
		if [ $zen_bin ]; then
			text="$bf\\Winetricks was not found$end\n$vb\\Install it first$end"
			dialog_list="gtk-close;$warning;4"; zen_warning
		fi
		exit 0
	fi
}
fn_extract_lnk(){
#	local $DESK_DIR
	sct_time=$(date +%H%M)
	dsk_dir=$XDG_DESKTOP_DIR
	
	desktop_file=$(ls -rtgGB --time-style=+%H%M $dsk_dir |sed -n '$p')
	dsk_name=$(ls -rt1 $dsk_dir| egrep ".desktop" | sed -n '$p')
#	dsk_name=$(echo "$desktop_file"| sed -n "s/\(^.*$sct_time\) \(.*\..*$\)/\2/p")
	f_name=$(echo "$dsk_name"| sed -n "s/\..*$//p")
	if [ "$dsk_name" ]; then
		IFS=$(echo -en "\n\b")
		if [ $(cat $dsk_dir/"$dsk_name"| grep -c "Path=" ) -gt 0 ]; then
			d_dest_dir=$(cat $dsk_dir/$dsk_name| grep "Path="|sed -n "s/^.*c:\\///p")
			if [ $(echo "$d_dest_dir"| egrep -c "(^\s*Prog.*Files)") -gt 0 ];then
				root_key="Program Files"$elf_ext"/"
				game_dir=$(echo "$d_dest_dir"| sed -n "s/^\(Prog.*Files\)\/\(.*\)/\2/p")
			else
				root_key='/'
				game_dir=$(echo "$d_dest_dir"| sed -n "s/\/$//p")
			fi
		fi
#		w_dest_lnk=$(cat $dsk_dir/$dsk_name| grep "Exec="|sed -n "s/^.*C://p"| cut -d' ' -f3)
		p_dest_lnk=$(cat $dsk_dir/$dsk_name| grep "Exec="|sed -n "s/^.*C:.*Unix \(.*.lnk\)/\1/p")
		b_dest_lnk=$dsk_dir/$f_name.lnk
		if [ -s $b_dest_lnk ]; then
			w_dest_lnk="$b_dest_lnk"
		elif [ -s $p_dest_lnk ]; then
			w_dest_lnk="$p_dest_lnk"
		fi
				
		if [ "$w_dest_lnk" != '' ]; then
			if [ $(printf "$w_dest_lnk"| grep -c "\\\\") -gt 0 ]; then
				w_dest_lnk=$(echo $w_dest_lnk| perl -pe "s|\\\||g;p")
			fi
			t_dest_exe=$($strings_bin "$w_dest_lnk"| egrep "(\s*[\w]*.exe)"|sed -n '1p')
			t_dest_dir=$($wine_bin winepath -u $($strings_bin "$w_dest_lnk"| egrep "(\s*[\w]*.exe)"|sed -n '$p'))
			t_dest_dir_exe=$(printf "$t_dest_dir"| sed -n "s/^.*\///p")
#			t_dest_dir_exe=$($strings_bin "$w_dest_lnk"| egrep "(\s*[\w]*.exe)"|sed -n "s/^.*\\\//p")
			if [[ $t_dest_exe ]]; then
				game_exe=$t_dest_exe	
			else
				game_exe=$t_dest_dir_exe
			fi
			abort=0
		else
			if ! [ -x $user_prefix/$bottle_prefix/drive_c/"$root_key"$game_dir/$game_exe ]; then
				if [ -x $yad_bin ]; then
					target_dir=$user_prefix/$bottle_prefix/drive_c/"$root_key"$game_dir/
					exe_text="$vb\\Please, select the executable in $game_dir.$end"
#					exe_seek=$($yad_bin --width=400 --title "$w_title" --form --image=stock_dialog_question \
#					--window-icon=filesave --separator="" \
#					--field="$exe_text":LBL '' --field="":FL "$target_dir")
					$zen_bin --width=400 --title "$w_title" --question --window-icon=$filesave \
					--text="$exe_text"
					if [ $? = 0 ]; then
						exe_seek=$($zen_bin --width=400 --title "$w_title" --question --window-icon=$filesave \
						--file-selection --filename=$target_dir --directory)
						abort=$?
						if [ $abort = 0 ]; then
							game_exe=$(printf "$exe_seek"|sed -n "s/^.*\///g;p")
						fi
					fi
				fi
			fi
		fi
		if [ -x $user_prefix/$bottle_prefix/drive_c/"$root_key"$game_dir/$game_exe ]; then
			if [ -s $config_file ]; then
				sed -ni "s|^\(\w*game_dir=\)\(\"\)\(.*\)\(\"$\)|\1\2$game_dir\4|i;p" $config_file
				sed -ni "s|^\(\w*game_exe=\)\(\"\)\(.*\)\(\"$\)|\1\2$game_exe\4|i;p" $config_file
			fi
			## modify and backup the desktop file
			fn_convert_desktop_file
		fi
#		IFS=$ifs
	fi
}
fn_convert_desktop_file(){
	if [ -s $convert_bin ]; then
#	local $DESK_DIR
	
	exe_key=$(printf "$game_exe"| perl -pe "s/^.*\///p")
	wine_dsk=$(printf "$XDG_DESKTOP_DIR"| sed -n "s/^.*\///p")
	lnk_key=$(ls -1 "$user_prefix/$bottle_prefix/drive_c/users/Public/$wine_dsk/"| egrep "(\s*.*\.lnk$)")
	
	
	if [ -s $user_prefix/$bottle_prefix/drive_c/"$root_key"$game_dir/$game_exe ]; then
		dsk_dir=$XDG_DESKTOP_DIR
		dsk_key=$(echo "$game_exe"| perl -pe "s/^.*\/(.*).exe/\1/g;p")
		
		if ! [ $dsk_name ]; then
			if [[ $lnk_key != '' ]]; then
				dsk_name=$(printf "$lnk_key"| sed -n "s/^\(.*\).lnk/\1/p")
			else
				desktop_file_list=( $(ls -1 $dsk_dir| egrep "(\s*.desktop$)") )
				for _file in "${desktop_file_list[@]}"; do
					if [ $(cat $dsk_dir/$_file| egrep -ci "(\s*$dsk_key)") -gt 0 ]; then
#						dsk_name=$(cat $dsk_dir/$_file| sed -n "s/Name=//p")
						dsk_name=$(cat $dsk_dir/$_file| sed -n "s/Name=//p"| egrep -i "(\s*$dsk_key)")
						if [ "$dsk_name" == '' ]; then
							dsk_name=$(printf "$_file"| sed -n "s/.desktop$//p")
						fi
					fi
				done
			fi
			if [ $w_install_exe -gt 0 ]; then
				if ! [ -s $dsk_dir/$dsk_name.desktop ]; then
					if [ -x $zen_bin ]; then
#					if [ -x $yad_bin ]; then
						d_text0="$vb\\Desktop file auto detection for $dsk_key failed.\\nSelect a desktop file entry manually. Or just cancel to pass.$end"
						d_text1="$vb\\You can also use winestarter_conf after and choose button:$end$rb\nEdit or create a desktop file$end"
#						dsk_list=$(printf "${desktop_file_list[*]}"| sed -n "s/.desktop//g;p"|tr '\n' '!')
#						dsk_seek=$($yad_bin --width=400 --title "$w_title" --form --image=$inform \
#						--window-icon=filesave --timeout=10 --timeout-indicator=bottom --separator="" \
#						--field="$d_text0":LBL '' --field="":CB "$dsk_list" \
#						--field="$d_text1":LBL ''
#						)
#						if ! [ "$dsk_seek" = '' ]; then dsk_name=$dsk_seek; fi #else
	#					text="$bf\\There no desktop file entry for your app$end\n$vb\\If you want one, launch winestarter_conf and choose button:$end$rb\nEdit or create a desktop file$end"
	#					dialog_list="gtk-close;$warning;4"; zen_warning
	#					fi
#					else
						w_width=400; div=4
						w_height=$(($w_width/$div))
						$zen_bin --width=$w_width --height=$w_height --title='' --window-icon="$d_img" \
						--question --text="$d_text0\n$d_text1"
						if [ $? = 0 ]; then
							dsk_seek=$($zen_bin --title='Winestarter fiel selector' --window-icon="$d_img" \
							--file-selection --filename=$HOME/Bureau/ --file-filter=*.desktop)
						fi
						if ! [ "$dsk_seek" = '' ]; then dsk_name=$dsk_seek; fi
					fi
				fi
			fi
		fi
		if [ $(printf "$dsk_name"| egrep -c "(\s*.desktop)") = 0 ]; then dsk_name=$dsk_name.desktop; fi
		if [[ -s "$dsk_dir/$dsk_name" && ! "$dsk_name" = '' ]]; then
			if [ $(cat $dsk_dir/$dsk_name| egrep -c "(\s*Icon=.*$exe_key)") = 0 ]; then
				d_icon=$(cat $dsk_dir/$dsk_name| grep "Icon="|sed -n "s/^Icon=//p")
				d_exec=$(printf "$game_exe"|perl -pe "s/$.*\///p")
				d_path=$(cat $dsk_dir/$dsk_name| grep "Path="|sed -n "s/^Path=//p")
				d_emblem=$scpt_dir/emblems/wine_emblem.png
				d_png_dir=$scpt_dir/png
				l_icon_dir=$HOME/.local/share/icons/hicolor
				cp -f $dsk_dir/$dsk_name $HOME/.winestarter/desktop/
				icons_list=( $(find $l_icon_dir -iname "$d_icon*") )
				for _png in ${icons_list[@]}; do
					icon_def=$(printf "$_png"| egrep -o "(\s*[0-9]*x[0-9]*)")
					icon_rank=$(printf "$icon_def"| sed -n "s/^.*x//p")
					if [ -n $icon_rank ]; then
						icon_min=$((256-$icon_rank))
						if [ $icon_min -le 208 ]; then
							rank_list+=("$icon_rank")
						fi
					fi
				done
				if [[ "${rank_list[*]}" != '' ]]; then
					# "0,64 1,48 2,128"
					scale_op=$(printf "%s\n" ${rank_list[*]}| sort -n| tail -1)
					scale=$scale_op'x'$scale_op
					d_icon_src=$l_icon_dir/$scale/apps/$d_icon.png
					$convert_bin $d_icon_src $d_emblem -scale $scale -composite $d_png_dir/$d_exec.png
					if [ -s $d_png_dir/$d_exec.png ]; then
						## replace icon
						sed -ni "s|^\(Icon\)=\(.*\)|\1=$d_png_dir/$d_exec.png|i;p" $dsk_dir/$dsk_name
						## replace exec
						sed -ni "s|^\(Exec\)=\(.*\)|\1=winestarter $conf|i;p" $dsk_dir/$dsk_name
					fi
				fi
			fi
		else
			## not found
			echo -e "»»»» NO DESKTOP FILE TO PROVIDE. PASSED."
			if [ $w_install_exe -gt 0 ]; then
				echo -e "»»»» PLEASE PROCESS WITH WINESTARER_CONF INSTEAD, IF AVAILABLE."
				if [ $zen_bin ]; then
					text="$brf\\No desktop file found for convertion$end$vb.\nPlease process with winestarter_conf instead$end"
					dialog_list="gtk-close;$inform;4"; zen_warning
				fi
			fi
		fi		
	fi
	else
		echo -e "»»»» WARNING: IMAGEMAGIK CONVERT BINARY NOT FOUND. PASSED."
		if [ $zen_bin ]; then
			text="$brf\\ImageMagick converter not found.$end$vb\nIf you xant to have desktop file entry convertion you need to install ImageMagick first.$end"
			dialog_list="gtk-close;$warning;4"; zen_warning
		fi
	fi
}
fn_install_exe(){
	sub_download(){
		if [[ $w_download_dir != '' ]]; then dl_dir=$w_download_dir; else dl_dir=$XDG_DOWNLOAD_DIR; fi
		pack_name=$(printf "$pkgs"| sed -n "s/^.*\///p")
		if ! [ -s $dl_dir/$pack_name ]; then
			dl_installer=1
			fn_download_ui
		fi		
	}
	echo "######################## 1"
	pkgs_log=$user_prefix/$bottle_prefix/packages.log
	
	if [ "$w_exe_path" != '' ]; then
		msi=$(printf "$w_exe_path"| grep -c "\.msi")
		new_pkg=$(printf "$w_exe_path"| sed -n "s/^.*\///g;p")
		if  ! [ -s $pkgs_log ]||[ $(cat $pkgs_log| grep -wc "$new_pkg") -eq 0 ]; then 
			if [[ $w_exe_path =~ ^(http*|ftp*) ]]; then
				pkgs=$w_exe_path
				sub_download
				w_exe_path=$dl_dir/$pack_name
			fi
			if [ $msi = 0 ]; then
				$wine_bin $w_exe_path $w_exe_opts
			else
				$wine_bin msiexec \/i $w_exe_path $w_exe_opts
			fi
			echo "$new_pkg" >> $pkgs_log
		else
			echo -e "»»»» $new_pkg already installed, pass."
		fi
		fn_extract_lnk
		sleep 1
		abort=0
#	else
#		abort=$?
#		exit 0
	fi
	if [ $(printf "$w_more_pkgs"| grep -c .) -gt 0 ]; then
		extra_log=$user_prefix/$bottle_prefix/extra_pcks.log
#		w_more_pkgs_list=( $(echo "$w_more_pkgs"| tr ',' '\n') )
		for pkg in ${w_more_pkgs[@]}; do
			msi=$(printf "$pkg"| grep -c "\.msi")
			prev_pck=$(echo -e "$pkg"| sed -n "s/^.*\///g;p")
			if ! [ -s $extra_log ]||[ $(cat $extra_log| grep -wc "$prev_pck") -eq 0 ]; then
				if [[ $pkg =~ ^(http*|ftp*) ]]; then
					pkgs=$pkg
					sub_download
					pkg=$dl_dir/$pack_name
				fi
				if [ $msi = 0 ]; then
					$wine_bin $pkg $w_exe_opts
				else
					$wine_bin msiexec \/i $pkg $w_exe_opts
				fi
				echo "$prev_pck" >> $extra_log
			else
				echo -e "»»»» $prev_pkg already installed, pass."
			fi
#			if [ -s  ]; then
#				if [ $(cat $user_prefix/$bottle_prefix/extra_pcks.log| grep -wc "$prev_pck") -eq 0 ]; then
#					echo "$prev_pck" >> $user_prefix/$bottle_prefix/extra_pcks.log
#				fi
#			else
#				echo "$prev_pck" >> $user_prefix/$bottle_prefix/extra_pcks.log
#			fi
		done
		abort=0
#	else
#		abort=$?
	fi
#	if [[ $(printf "$w_install_zip"| grep -c .) -gt 0 && "$w_install_zip" != $HOME/ ]]; then
	if [ $(printf "$w_install_zip"| grep -c .) -gt 0 ]; then
		if [ $(printf "$w_install_dir"| grep -c .) -gt 0 ]; then
			mkdir -p $user_prefix/$bottle_prefix/drive_c/$w_install_dir
			target_dir=$user_prefix/$bottle_prefix/drive_c/$w_install_dir
		else
			target_dir=$user_prefix/$bottle_prefix/drive_c/
			if [ -x $zen_bin ]; then
				dir_text="$vb\\Please, select or create the target directory in C: drive.$end"
#				w_install_dir=$($yad_bin --width=400 --title "$w_title" --form \
#				--image=stock_dialog_question --window-icon=filesave --separator="" \
#				--field="$dir_text":LBL '' --field="":CDIR "$target_dir")
				$zen_bin --width=400 --title "$w_title" --question --window-icon=$filesave \
				--text="$dir_text"
				if [ $? = 0 ]; then
					w_install_dir=$($zen_bin --title "$w_title" --window-icon=$filesave \
					--file-selection --filename=$target_dir --directory)
				fi
				abort=$?
				target_dir=$w_install_dir
				w_install_dir=$(printf "$target_dir"| sed -n "s/^.*\///g;p")
			fi
		fi
		new_pkg=$(printf "$w_install_zip"| sed -n "s/^.*\///g;p")
		if  ! [ -s $pkgs_log ]||[ $(cat $pkgs_log| grep -wc "$new_pkg") -eq 0 ]; then
			mkdir -p $target_dir
			game_dir=$w_install_dir
		
			if [[ $w_install_zip =~ ^(http*|ftp*) ]]; then
				pkgs=$w_install_zip
				sub_download
				w_install_zip=$dl_dir/$pack_name
			fi
			if [ $(printf "$w_install_zip"| grep -c ".zip") -gt 0 ]; then
	#			unzip -o -D ISO-8859-15 $w_install_zip -d $w_install_dir
				unzip -o $w_install_zip -d $target_dir
			elif [ $(printf "$w_install_zip"| grep -c ".rar") -gt 0 ]; then
				cd $target_dir
				unrar x -y -o+ -inul $w_install_zip
			elif [ $(printf "$w_install_zip"| grep -c ".7z") -gt 0 ]; then
				if [ $(printf "$w_install_zip"| grep -c "tar.7z") -gt 0 ]; then
					7z x -y -so $w_install_zip | tar -xf -
				else
					cd $target_dir
					7z x -y $w_install_zip
				fi
			elif [ $(printf "$w_install_zip"| grep -c ".exe") -gt 0 ]; then
				$wine_bin $w_install_zip $wine_opts
			fi
			echo "$new_pkg" >> $pkgs_log
		else
			echo -e "»»»» $new_pkg already installed, pass."
		fi
		if [ -x $zen_bin ]; then
			exe_text="$vb\\Please, select the executable to launch in $game_dir.$end"
#			exe_seek=$($yad_bin --width=400 --title "$w_title" --form --image=stock_dialog_question \
#			--window-icon=filesave --separator="" \
#			--field="$exe_text":LBL '' --field="":FL "$target_dir")
			$zen_bin --width=400 --title "$w_title" --question --window-icon=$filesave \
			--text="$exe_text"
			if [ $? = 0 ]; then
				exe_seek=$($zen_bin --width=400 --title "$w_title" --window-icon=$filesave \
				--file-selection --filename=$target_dir --file-filter=*.{exe,EXE})
			fi
			abort=$?
			if [ $abort = 0 ]; then
				game_exe=$(printf "$exe_seek"|sed -n "s/^.*\///g;p")
				if [ -s $config_file ]; then
					sed -ni "s|^\(\w*game_dir=\)\(\"\)\(.*\)\(\"$\)|\1\2$game_dir\4|i;p" $config_file
					sed -ni "s|^\(\w*game_exe=\)\(\"\)\(.*\)\(\"$\)|\1\2$game_exe\4|i;p" $config_file	
				fi
			fi
		fi		
	fi
#	if [[ $(printf "$w_extra_script"| grep -c .) -gt 0 && "$w_install_zip" != $HOME/ ]]; then
	if [ $(printf "$w_extra_script"| grep -c .) -gt 0 ]; then
		chmod 755 $w_extra_script
		cp -f $w_extra_script $user_prefix/$bottle_prefix/drive_c/Program\ Files"$w_elf_ext"/$game_dir/
	fi	
	if [ $abort = 1 ]; then
#	if ! [ -x $user_prefix/$bottle_prefix/drive_c/Program\ Files"$w_elf_ext"$game_dir/$game_exe ]; then
		
		echo -e "»»»» EXE path was not found.\n# Defining the right install executable path is mandatory.\n# EXIT.\n"
		if [ $zen_bin ]; then
			text="$brf\\EXE path was not found.$end$vb\nDefining the right install executable path is mandatory.\n\nEXIT.$end"
			dialog_list="gtk-close;$warning"; zen_warning
		fi
		exit 0
	else
		perl -ni -pe "s|(w_install_exe)=[0-9]|\1=0|i" $config_file
	fi
}
fn_game_dir_exist(){
	## search where is the "Prgram Files" dir and type.
	echo "######################## 2"
	fn_root_key
	if [[ $game_dir == '' && $game_exe == '' ]]; then
		mkdir -p $user_prefix/$bottle_prefix/drive_c/Program\ Files"$elf_ext"
	fi
	## search if there any app path in "Program Files" or root. If none, link the predifine app dir if any.
	if [[ $game_path != '' ]]; then
#	if [[ $game_path == '' ]]; then
		link=$(printf "$game_path"| sed -n "s/^.*\///g;p")
		target_dir=$user_prefix/$bottle_prefix/drive_c/"$root_key"$link/
		if ! [ -d $target_dir ]; then
			ln -sf $game_path $user_prefix/$bottle_prefix/drive_c/$root_key
		fi
		target_app=$user_prefix/$bottle_prefix/drive_c/"$root_key"
		if [ $zen_bin ]; then
		echo "######################## 3"
			if [ -d $target_dir ]; then
				if [ "$game_dir" == '' ]; then game_dir='none'; fi
#				if [ "$game_dir" != '' ]; then game_dir='none'; fi
				if ! [ -d $target_app$game_dir ]; then
#				if [ -d $target_app$game_dir ]; then
					if [ $(ls -1 $target_dir| grep -c .) -gt 1 ]; then
						d_text="$vb\\More that one directory found in path$end"
#						target_ls=$( ( ls -1 $target_dir| tr '\n' '!' )| yad --title 'WARMING' --width=400 \
#						--form --field="Please select one":CB --separator='' --text="$d_text" )
						## TODO > list field
						_n_val=1
#						_val_list=$(ls -1 $target_dir| egrep ".(exe|EXE)$")
						_dir_list=$(du -ah -d 1 $target_dir| egrep -v ".(EXE|exe|dlls|bin)$"| \
						sed -En "s/^.*[\.]?\/(.*)$/\1/p")
						for _dir in ${_dir_list[@]}; do
							_list_dir+=('false' "$_n_val" "$_dir")
							_output_dir+=("$_dir")
							_n_val=$(($_n_val+1))
						done
						w_title='Select app directory'
						target_ls=$($zen_bin --width=400 --title "$w_title" --window-icon=$filesave \
						--text="$d_text" --list --radiolist --hide-header --column "1" --column "2" \
						--column "3" --separator=";" --hide-column=2 "${_list_dir[@]}")
						_out_target=$(($target_ls-1))
						game_dir=$target_dir${_output_dir[$_out_target]}
#						game_dir=$target_dir$target_ls
					else
						game_dir=$target_dir$(ls -1 $target_dir)
					fi
					if [ "$sed_key" != '' ]; then
						game_dir=$(echo "$game_dir"| sed -n "s/^.*$sed_key//g;p")
					fi
					sed -ni "s|^\(\w*game_dir=\)\(\"\)\(.*\)\(\"$\)|\1\2$game_dir\4|i;p" $config_file
				fi
				if [ "$game_exe" == '' ]; then game_exe='none'; fi
				if ! [ -s $target_app$game_dir/$game_exe ]; then
					w_title='Select app exe in directory'
					d_text="$vb\\App executable is not set:\\nChoose one in the list below.$end"
#					exe_ls=$( ( ls -1 $user_prefix/$bottle_prefix/drive_c/"$root_key"$game_dir/| tr '\n' '!'
#					)| $yad_bin --title 'WARMING' --width=400 --form --field="Please select one":CB \
#					--separator='' --text="$d_text" )
					## TODO > list field
					_n_val=1
					_exe_list=$(ls -1 $user_prefix/$bottle_prefix/drive_c/"$root_key"$game_dir/ | \
					egrep ".(exe|EXE)$")
					for _exe in ${_exe_list[@]}; do
						_list_exe+=('false' "$_n_val" "$_exe")
						_output_exe+=("$_exe")
						_n_val=$(($_n_val+1))
					done
					exe_ls=$($zen_bin --width=400 --title "$w_title" --window-icon=$filesave \
					--text="$d_text" --list --radiolist --hide-header --column "1" --column "2" \
					--column "3" --separator=";" --hide-column=2 "${_list_exe[@]}")
					_out_exe=$(($exe_ls-1))
					game_exe=${_output_exe[$_out_exe]}					
#					game_exe=$exe_ls
					sed -ni "s|^\(\w*game_exe=\)\(\"\)\(.*\)\(\"$\)|\1\2$game_exe\4|i;p" $config_file
				fi
			fi
		fi
	fi
}
fn_root_key(){
	## search where is the "Prgram Files" dir and type.
	pf_key_yes(){
		root_key="Program Files$elf_ext/"
		sed_key="Files$elf_ext\/"
		win_prog="$root_key"
#		if [ $special_cmd -gt 0 ]; then
#			win_prog="Program\ Files$w_elf_ext"
#		else
#			win_prog="Program Files$elf_ext\\"
#		fi
	}
	pf_key_no(){
		root_key=''
		sed_key=''
		win_prog=''
	}
#	if [ $app_portable = 1 ]; then
#		end_target=$user_prefix/$bottle_prefix/drive_c
#	else
#		end_target=$user_prefix/$bottle_prefix/drive_c/$game_dir
#	fi
	if [ "$game_dir" != '' ]; then
		if [ -d $user_prefix/$bottle_prefix/drive_c/$game_dir ]; then pf_key_no; else pf_key_yes; fi
	else
		if [ $app_portable = 1 ]; then pf_key_no; else pf_key_yes; fi
	fi
}
fn_wine_binary(){
	if [ $_use_winepath_env -gt 0 ]; then
		wine_elf_path=$wine_path/$ftp_elf/$wine_ver
		export WINEVERPATH=$wine_elf_path
		export PATH=$wine_elf_path/bin:$PATH
		export WINESERVER=$wine_elf_path/bin/wineserver
		export WINELOADER=$wine_elf_path/bin/wine
		if [ $wine_elf = 1 ]; then
			export WINEDLLPATH=$wine_elf_path/$libs/wine/fakedlls
#			export LD_LIBRARY_PATH="$wine_elf_path/lib:$wine_elf_path/$libs:$LD_LIBRARY_PATH"
			export LD_LIBRARY_PATH=$wine_elf_path/lib:$wine_elf_path/$libs:$LD_LIBRARY_PATH
			#":/lib:/lib64:/usr/lib:/usr/lib64"
		else
			export WINEDLLPATH=$wine_elf_path/lib/wine
			export LD_LIBRARY_PATH="$wine_elf_path/lib:$LD_LIBRARY_PATH"
			#":/lib:/lib64:/usr/lib:/usr/lib64"
		fi
#		PATH="$PATH:$wine_elf_path/bin"
#		export LD_LIBRARY_PATH
#		export PATH
#		echo "$LD_LIBRARY_PATH"
		wine_bin=$WINELOADER
		wine_bin_path=$wine_elf_path/bin/
	#	wineboot -u
	#	wine --version
	fi
}
fn_wineconf(){
	winecfg
	perl -ni -pe "s|(w_config)=[0-9]|\1=0|i" $config_file
}
fn_replace_env(){
	sec_desk=$(find /usr/{bin,local/bin} -name $secondary_desktop)
	if [ -x $sec_desk ]; then
		$secondary_desktop --replace &
	fi
}
cd $scpt_dir
## set xrandr if necessary
if [ $auto_set -gt 0 ]; then
	${set_xrandr}
	sleep 3
fi
## make unix space behaviour redeable
ifs=$IFS
IFS=$(echo -en "\n\b")
if [ $wine_elf = 1 ]; then
	elf=64; elf_ext=' (x86)'; w_elf_ext='\ (x86)'; ftp_elf='amd64'; libs="lib$elf"
else
	elf=32; elf_ext=''; w_elf_ext=''; ftp_elf='x86'; libs='lib'
fi
## export env variable, usually "env WINEARCH=wine32 WINEPREFIX=~/wine_prefix" before wine cmd 
export WINEARCH=win$elf
#export WINEARCH=win64
export WINEPREFIX=$user_prefix/$bottle_prefix
_use_winepath_env=0
if [ $use_optimus = 1 ]; then fn_optimus; fi
if [ $use_winepath = 1 ]; then fn_use_winepath; fi
fn_wine_binary
#if [ $w_install_tricks = 1 ]; then fn_install_tricks; fi
fn_install_tricks
if [ $w_install_exe = 1 ]; then fn_install_exe; fi
fn_game_dir_exist
#fn_extract_lnk
#exit 0
fn_convert_desktop_file
#if [ $_use_winepath_env -gt 0 ]; then
#	export WINELOADER=$wine_path/$ftp_elf/$wine_ver/bin/wine
#	export WINESERVER=$wine_path/$ftp_elf/$wine_ver/bin/wineserver
#	if [ $wine_elf = 1 ]; then
#		export WINEDLLPATH=$wine_path/$ftp_elf/$wine_ver/$libs/wine
#		LD_LIBRARY_PATH="$wine_path/$ftp_elf/$wine_ver/lib:$wine_path/$ftp_elf/$wine_ver/$libs"
#		#:/usr/lib:/usr/lib64:/lib:/lib64
#	else
#		export WINEDLLPATH=$wine_path/$ftp_elf/$wine_ver/lib/wine
#		LD_LIBRARY_PATH="$wine_path/$ftp_elf/$wine_ver/lib"
#	fi
#	PATH="$PATH:$wine_path/$ftp_elf/$wine_ver/bin"
#	export LD_LIBRARY_PATH
#	export PATH
#	echo "$LD_LIBRARY_PATH"
#	wine_bin=$WINELOADER
##	wineboot -u
##	wine --version
#fi
reg_file=$(printf "$conf"| sed -n "s/\.conf//p")".reg"
## create and insert registry entry if any.
#if [[ $(printf "$user_reg"| sed -n '$p') != '' ]]; then fn_regedit; fi
fn_regedit
if [ $(printf "$local_association"| grep -c .) -gt 0 ]; then fn_mime_asso; fi
if [ $(printf "$dll_reg_manager"| grep -c .) -gt 0 ]; then fn_reg_dlls; fi
if [ $w_config = 1 ]; then fn_wineconf ; fi

## check one last time that appli directory exist
#if ! [ -s $user_prefix/$bottle_prefix/drive_c/Program\ Files/$game_dir/$game_exe ] || \
if ! [ -s $user_prefix/$bottle_prefix/drive_c/"$root_key"$game_dir/$game_exe ]; then
	IFS=$ifs 
	echo -e "»»»» Can't find $game_exe for $user_prefix/$bottle_prefix
»»»» ABORT & EXIT"
	if [ $zen_bin ]; then
		text="$bf\\Can't find an executable for:$end\n$rb\\$user_prefix/$bottle_prefix$end\n\n$vb\\Script will now end on exception.$end"
		dialog_list="gtk-close;$warning"; zen_warning
	fi
	exit 0
fi

if [ $set_desktop_env = 1 ]; then fn_replace_env; fi
## test to find out the real application path
if [ -d $user_prefix/$bottle_prefix/drive_c/$game_dir ]; then
	win_prog=''
else
	win_prog="$root_key"
fi
## capture app exe for pid discovering and before cmd line conversion
game_exe_only=$(echo "$game_exe"| perl -pe "s/^.*\///p")
## execute
if [ $special_cmd -gt 0 ]; then
	cd $user_prefix/$bottle_prefix/drive_c/"$root_key"$game_dir
#	$opti_run $wine_bin "$user_prefix/$bottle_prefix/drive_c/"$root_key"$game_dir/$game_exe"
	$opti_run $wine_bin $game_exe $wine_opts &
elif [ $start_cmd -gt 0 ]; then
	# pull wine start command line in unix syle
	$opti_run $wine_bin start /unix \
	"$user_prefix/$bottle_prefix/drive_c/"$root_key"$game_dir/$game_exe" $wine_opts &
else
	## Replace Linux slash by Windows backslash
#	game_dir=$(printf "$game_dir"|sed -n "s/\//\\\/g;p")
#	game_exe=$(printf "$game_exe"|sed -n "s/\//\\\/g;p")
#	$opti_run $wine_bin C:\\$win_prog$game_dir\\$game_exe $wine_opts &
	SOFT_PATH=$($wine_bin winepath -w "$user_prefix/$bottle_prefix/drive_c/"$win_prog"$game_dir/$game_exe")
	$opti_run $wine_bin $SOFT_PATH $wine_opts &
fi
## restore linux regex
IFS=$ifs
## find .exe pid file and let some time for exe too launch before
sleep 5
#exe_short=$(ps -A -o time,ruser,cmd |grep -v "00:00:00"|grep "$USER.*\.exe"|sed -n "s/^.*\/\(\w*\([A-Z]\|[a-z]\).exe\).*$/\1/;s/^\(.\{3\}\).*/\1/g;1p")
if [ $(ps -A | grep -c "$game_exe_only") -gt 0 ]; then
	exe_short=$(echo "$game_exe_only"|sed -n "s/^\(.\{3\}\).*/\1/g;p")
else
	exe_short=$(echo "$game_exe_only"|sed -n "s/^\(.\{3\}\).*/\1/g;p")
#	exe_short=$(ps -A -o time,ruser,cmd |grep -v "00:00:00"|grep "$USER.*\.exe"| \
#	sed -n "s/^.*[\/\|\\\]//;s/^\(.\{3\}\).*/\1/g;p")
fi
#bin_pid="pgrep ^\(\s*$exe_short.*$\)"
#bin_pid="pgrep ^$exe_short.*.exe$"
bin_pid="pgrep ^$exe_short.*.e.*$"
A_PID=$(${bin_pid})
## if script is launched from winestarter configurator, ger Yad pid and kill it
#if [ $YAD_PID ]; then killall -9 yad ; fi
if [ $YAD_PID ]; then kill $YAD_PID $(($YAD_PID+1)) ; fi
## if replace window manager is set, don't kill it before the app is ended
if [ $set_desktop_env -gt 0 ]; then
#	sleep 2
	while [[ $(${bin_pid}) ]]; do 
		sleep 10
	done
	$default_desktop --replace &
fi
## if xrandr resolution is set, don't kill it before the app is ended
if [ $auto_set -gt 0 ]; then
#	sleep 5
#	bin_pid="pgrep $short_name*"
	while [[ $(${bin_pid}) ]]; do 
		sleep 10
	done
	${bck_xrandr}
fi
exit 0
