#! /bin/bash

# #License:
#   This program is free software; you can redistribute it and/or
#   modify it under the terms of the GNU Lesser General Public
#   License as published by the Free Software Foundation; either
#   version 2.1 of the License, or (at your option) any later
#   version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU Lesser General Public License for more details.
#
#   You should have received a copy of the GNU Lesser General Public
#   License along with this program.  If not, see
#   <https://www.gnu.org/licenses/>.
#
## You can redistribute it as you wish : GPL v3
## author : wildtruc@noneltd.net

#PATH=$PATH
colors(){
#main='#005400'
#warn='#FF3300'
#freeze='#b6b6b6'
#font='Noto Sans'
#size='10'
#vb='<span color="'$main'" weight="bold" font="'$font'" size="'$size'">'
#vn='<span color="'$main'" weight="normal" font="'$font','$size'">'
#rb='<span color="'$warn'" weight="bold" font="'$font','$size'">'
#gb='<span color="'$freeze'" weight="bold" font="'$font','$size'">'
#bf='<span color="'$main'" weight="bold" font="'$font','$(($size+4))'">'
#brf='<span color="'$warn'" weight="bold" font="'$font','$(($size+4))'">'
#nf='<span weight="bold" font="'$font $size'">'
if [ -s $HOME/.winestarter/color.conf ]; then
 . $HOME/.winestarter/color.conf
fi
vb='<span color="'$main'" weight="bold" font="'$font0' '$size0'">'
vn='<span color="'$main'" weight="normal" font="'$font0' '$size0'">'
rb='<span color="'$warn'" weight="bold" font="'$font0' '$size0'">'
gb='<span color="'$freeze'" weight="bold" font="'$font0' '$size0'">'
bf='<span color="'$main'" weight="bold" font="'$font1' '$size1'">'
brf='<span color="'$warn'" weight="bold" font="'$font1' '$size1'">'
#bf='<span color="'$main'" weight="bold" font="'$font' '$(($size+4))'">'
#brf='<span color="'$warn'" weight="bold" font="'$font' '$(($size+4))'">'
nf='<span weight="bold" font="'$font0' '$size0'">'
vz='<span color=\"'$main'\" weight=\"bold\" font=\"'$size0'\">'

end='</span>'
vB=$vb
}
icons_set(){
	png_stock=$HOME/.winestarter/png/defaults
	## window bar icon
	img_desktop=$png_stock/'wine48w.png'
	
	img_wine_add=$png_stock/'new_bottle16.png'
	img_wine_mod=$png_stock/'config16.png'
	img_wine_desk_bt=$png_stock/'desktop16.png'
	img_wine_desk_ui=$png_stock/'wine48w.png'
	img_wine_ui=$png_stock/'wine-wine48.png'
	img_wine_desktop=$png_stock/'colors48.png'
	img_wine_cfg1=$png_stock/'wine-winecfg48.png'
	img_wine_cfg2=$png_stock/'wine-msiexec48.png'
	img_tricks=$png_stock/'wine-winetricks48.png'
	img_tricks_bt=$png_stock/'wine16w.png'
	img_install=$png_stock/'wine-install48.png'
	img_reged=$png_stock/'wine-winefile48.png'
	img_nv_cm=$png_stock/'nvidia48.png'
	img_nv_ext=$png_stock/'graphic_set48.png'
	img_xrandr=$png_stock/'display48.png'
	img_opti=$png_stock/'optimus48.png'
	img_wine_colors=$png_stock/'colors16.png'
	img_wine_restart=$png_stock/'reload.png'
	img_wine_reload=$png_stock/'reload48.png'
	## PoL and WineHQ selection and download set
	img_winepol_bt=$png_stock/'playonlinux16.png'
	img_winedis_bt=$png_stock/'wine16r.png'
	img_dl_pol=$png_stock/'wine48w.png'
	img_dl_whq=$png_stock/'wine48r.png'
}
main_code(){
		default_win_design(){
		for sets in "${basic_sets[@]}"; do
			c_tab=$(printf "$sets"| cut -d';' -f1)
			c_set=$(printf "$sets"| cut -d';' -f2) #*
			c_var=$(printf "$sets"| cut -d';' -f3) #*
			c_name=$(printf "$sets"| cut -d';' -f4)
			c_msg=$(printf "$sets"| cut -d';' -f5)
			c_box=$(printf "$sets"| cut -d';' -f6)
			c_opt=$(printf "$sets"| cut -d';' -f7)
			n_var=$(printf "$sets"| cut -d';' -f8)
			fn_op=$(printf "$sets"| cut -d';' -f9)
			t_img=$(printf "$sets"| cut -d';' -f10)
			if [ $from_config = 1 ]&&[ $c_box != 'LBL' ]; then
				if [ $c_box == 'CB' ]||[ $c_box == 'CBE' ]; then
					if [ "$c_set" != 'unset' ]; then extend=$item_sep'unset'; else extend=''; fi
				fi
			fi
			# regedit filter to parse full text in UI
			if [[ $c_var == user_reg ]]; then
				c_set=$(cat $reg_file| perl -pe "s|\\\|\\\\\\\|g;p"| tr '*' '\n')
			fi
			if [ $c_box == '' ]; then chk_box="$c_set"; fi 
			if [ $c_box == 'CHK' ]; then 
				if [ $c_set = 0 ]||[[ $c_set == unset ]]; then chk_box=FALSE;	else chk_box=TRUE; fi
			fi
			if [ $c_box == 'NUM' ]; then chk_box="$c_set$item_sep$c_opt"; fi
			if [ $c_box == 'LBL' ]; then chk_box=''; fi
			if [ $c_box == 'CB' ]; then chk_box="$c_set$item_sep$c_opt$extend"; fi
			if [ $c_box == 'CBE' ]; then chk_box="$c_set$item_sep$c_opt$extend"; fi
			if [ $c_box == 'DIR' ]; then chk_box="$c_set"; fi
			if [ $c_box == 'CDIR' ]; then chk_box="$c_set"; fi
			if [ $c_box == 'FL' ]; then chk_box="$c_set"; fi
			if [ $c_box == 'MFL' ]; then chk_box="$c_set"; fi
			if [ $c_box == 'SFL' ]; then chk_box="$c_set"; fi
			if [ $c_box == 'TXT' ]; then chk_box="$c_set"; fi
			if [ $c_box == 'FBTN' ]; then chk_box="$c_set"; fi
				
			field_list+=("--field=$c_msg:$c_box")
			# preconfigured sets
		
			chk_list+=("$chk_box")
			# tabs configuration fields ex:
			# "14;0;THREAD;;$msg_nvidia;CHK;;__GL_THREADED_OPTIMIZATIONS"
			## ignore first winestarter selector window
			if [ $ignore_loop = 0 ]; then
				tmp_cut+=("$tmp_key;$c_var;$c_tab")
			fi
		done
		# ne pas tenir compte des labels
		if [ $win_type = 0 ]; then
			def_win=$($yad_bin --width=$w_width --title "$w_title" --image=$img_wine_ui \
			--window-icon=$img_desktop \
			--form "${field_list[@]}" "${chk_list[@]}" --separator=';' --item-separator="$item_sep" \
			--align=left --text "$bf$w_text$end" \
			)
#			YAD_02=$(ps -A | grep "yad" | awk '{print $1}'| sed -n '1p')
			if [ $? = 1 ]; then exit 0; fi
			default_win=$(printf "${def_win[@]}"|sed -n "s/;/?;?/g;p"| \
			perl -pe "s/\?(\w*[\/A-Za-z0-9]+)\?/\1/g, s/^(\w*[\/A-Za-z0-9]+)\?/\1/;p, s/\;\?/;/g;p, s/([\;]+$)$/\1?/p")
			form_win=$(printf "${default_win[@]}"|tr ';' '\n')			
		fi
		if [ $win_type = 1 ]; then
			w_width=$((594+$scale))
			$yad_bin --width=$w_width $t_plug --text="$w_text" --form $extended_opts \
			"${field_list[@]}" "${chk_list[@]}" --separator=';' --item-separator="$item_sep" > $temp &
#			YAD_03=$(ps -A | grep "yad" | awk '{print $1}'| sed -n '1p')
		fi
#		if [ $win_type = 2 ]; then
#			"${field_list[@]}" "${chk_list[@]}"
#		fi
#		if [ $basic_set = 1 ]; then
#			fn_wine_basic_feed
#		fi
	}
	default_tab_design(){
		fn_plz_wait &
		n_cfg=1
		n_set=1
		for cfg_form in ${form_win[@]}; do
			if [[ $cfg_form =~ ^[A-Z]+ ]]; then
				if [ $cfg_form = 'FALSE' ]; then w_set=0; else w_set=1; fi
				for order in "${basic_sets[@]}"; do
					c_tab=$(printf "$order"| cut -d';' -f1)
					c_box=$(printf "$order"|grep "$c_tab"|cut -d';' -f6)
					if [ $c_tab = $n_cfg ];then
						if [ $(printf "$order"| awk '{print $1}'|grep -c "$c_tab") = 1 ]; then
							if [ $(printf "$order"|grep -c 'LBL') = 0 ]; then			
								if [ $cfg_form != 'FALSE' ]; then
									c_var=$(printf "$order"|grep "$n_cfg"|cut -d';' -f3)
									c_name=$(printf "$order"|grep "$n_cfg"|cut -d';' -f4)
									c_fn_op=$(printf "$order"|grep "$n_cfg"|cut -d';' -f9)
									c_img=$(printf "$order"|grep "$n_cfg"|cut -d';' -f10)
									if [ $c_var == _extended ]; then
										## special set to insert in first place before creating the whole thing
										export _extended=$w_set	 
									else
										cfg_set+=("$c_var=$w_set")
										tab_set+=("$n_set;$c_var;$c_name;$c_fn_op;$c_img")
										n_set=$[ $n_set+1 ]
									fi
								else
									c_var=$(printf "$order"|grep "$n_cfg"|cut -d';' -f3)
									if [ $c_var == _extended ]; then
										export _extended=$w_set
									else
										cfg_set+=("$c_var=$w_set")
									fi
								fi
							else
								n_cfg=$[ $n_cfg+1 ]
							fi
						fi
					fi
				done	
			fi
			n_cfg=$[ $n_cfg+1 ]
		done
	}
	default_tab_create(){
#		fn_plz_wait &
		WAIT_UI_1=$(ps -A | grep "yad" | awk '{print $1}'| sed -n '1p')
		for tab_vars in ${tab_set[@]}; do
			t_num=$(printf "$tab_vars"| cut -d';' -f1)
			t_var=$(printf "$tab_vars"| cut -d';' -f2)
			t_name=$(printf "$tab_vars"| cut -d';' -f3)
			t_fn_op=$(printf "$tab_vars"| cut -d';' -f4)
			t_img=$(printf "$tab_vars"| cut -d';' -f5)
			if [ $t_num -gt 0 ]; then 
				temp=$(mktemp --tmpdir tab$t_num.XXXXXXXX)
				tmp_key=$(printf "$temp"|sed -n "s|^.*\.||p")
				t_plug="--plug=$key --tabnum=$t_num --image=$t_img"
				t_name=$(printf "$t_name"| tr '*' ' ')
				t_display+=("--tab=$t_name")
				t_val=1
			else
				t_val=0
			fi
			tab_temp+=("$t_var;$t_val;$t_name;$temp;$tmp_key")
			if [ $t_num -gt 0 ]; then ${t_fn_op}; fi
		done
		if [ $win_type = 1 ]; then
		kill $WAIT_UI_1
			w_width=$((700+$scale))
			$yad_bin --width=$w_width --title "$w_title" --window-icon=$img_wine_desk_ui $main_opts \
			--notebook --key=$key --tab-pos=right --tab-border=2 --text="$main_tab_text" \
			"${t_display[@]}"
			e_exit=$?
			if [ $t_var == _resume ]; then
				if [ $e_exit -ge 0 ]; then exit 0; fi
			else
#				exit 0
				if [ $e_exit = 1 ]; then
					exit 0
				else
					if [ $t_var == _wfirst ]; then fn_wine_basic_feed; else extract_tmp_settings; fi
				fi
			fi
		fi
	}
	
	extract_tmp_settings(){
#	sleep 5
	fn_plz_wait &
	WAIT_UI_2=$(ps -A | grep "yad" | awk '{print $1}'| sed -n '1p')
	unset conf_prep _reg_var _unset_var _chg_var
	for sets in "${tab_temp[@]}"; do
		unset conf_prep new_conf_list
		s_var=$(printf "$sets"| cut -d';' -f1)
		s_var_val=$(printf "$sets"| cut -d';' -f2)
		s_name=$(printf "$sets"| cut -d';' -f3)
		s_tmp=$(printf "$sets"| cut -d';' -f4)
		s_key=$(printf "$sets"| cut -d';' -f5)
		M=0
		for s_rank in ${tmp_cut[@]}; do
			c_key=$(printf "$s_rank"| cut -d';' -f1)
			c_vars=$(printf "$s_rank"| cut -d';' -f2)
			c_rank=$(printf "$s_rank"| cut -d';' -f3)

			if [[ $s_key == $c_key ]]; then
				if [[ $c_vars != '' ]]; then
					if [ $(cat $s_tmp | grep -oc "HKEY_CURRENT_USER") = 1 ]; then
						perl -ni -pe "s|\\\n|*|i" $s_tmp
					fi
					conf_set=$(cat "$s_tmp"|cut -d';' -f$c_rank)
					conf_prep+=("$s_var;$s_var_val;$c_vars;$conf_set")
				fi
			fi
		done
		# start write here
		for ins in "${conf_prep[@]}"; do
			_fn_var=$(printf "$ins"| cut -d';' -f1)
			_fn_val=$(printf "$ins"| cut -d';' -f2)
			_var=$(printf "$ins"| cut -d';' -f3)
			_val=$(printf "$ins"| cut -d';' -f4)
			reconf=(reconf$_fn_var)
			
			if [ $from_config = 1 ]; then
				_fn_exist=$(cat $config_file| grep -wc "$_fn_var")
				if [ $_fn_exist -gt 0 ]; then
					if [ $_fn_val = 1 ]; then
						insert_section=0
						conf_set=($_var=$_val)
						local "${conf_set}"
						${reconf}
#						if [[ $_var == user_reg ]]; then
#							cat $config_file | sed -n "/^user_reg='/,/'/{;s/.*/user_reg=''/};p"| \
#							uniq > $reg_temp
#								perl -ni -pe "s|^user_reg=''|user_reg='$(cat $reg_edit)'|i" $reg_temp
#								if [ $insert_section = 0 ]; then
#									cat $reg_temp > $config_file
#								fi
#						elif [[ $_var == w_more_pkgs ]]; then
#							if [ $old_val -gt 1 ]; then
#								cat $config_file | sed -n "/^w_more_pkgs='/,/'/{;s/.*/w_more_pkgs=''/};p"| \
#								uniq > $conf_temp
#								
#							else
#								cat $config_file | sed -n "s/^w_more_pkgs='.*'/w_more_pkgs=''/g;p" > $conf_temp
#							fi
#								perl -ni -pe "s|^w_more_pkgs=''|w_more_pkgs='$(cat $conf_edit)'|p" $conf_temp
#								if [ $insert_section = 0 ]; then
#									cat $conf_temp > $config_file
#								fi
#						else
						if [ $insert = 1 ]; then
							if [ "$_val" != discard ]; then
								if [ "$_val" != '' ]; then
									if [ $(cat "$config_file"| egrep -c "(^\s*$_var.*['\|\"])") -gt 0 ]; then
										sed -ni "s|^\(\w*$_var=\)\(['\|\"]\)\(.*\)\(['\|\"]\)$|\1\2$_val\4|i;p" $config_file
									else
										sed -ni "s|^\(\w*$_var\)=\(.*\)$|\1=$_val|i;p" $config_file
									fi
								else
									sed -ni "s|^\(\w*$_var=\)\(['\|\"]\)\(.*\)\(['\|\"]\)$|\1\2\4|i;p" $config_file
								fi
							fi
						fi
					fi
				else
					if [ $_fn_val = 1 ]; then
						insert_section=1
						new_conf=(newconf$_fn_var)
						new_conf_set=($_var=$_val)
						local "${new_conf_set}"
						${reconf}
					fi
				fi
			else
				_fn_exist=0
				insert_section=0
				new_conf=(newconf$_fn_var)
				new_conf_set=($_var=$_val)
				local "${new_conf_set}"
				${reconf}
			fi
			
			if [ -n $M ]; then
				if [ $M -gt 0 ]; then _fn_val=1; else _fn_val=0; fi
				if [ $from_config = 1 ]; then
					perl -ni -pe "s|(^$_fn_var)=([0-9]*)$|\1=$_fn_val|i" $config_file
				fi
			fi
		done
		if [ $_extended = 1 ]; then
			if [ "${#_args[@]}" -gt 0 ]; then
				if [[ $from_config = 1 || $insert_section = 0 ]]; then
					sed -ni "s|\(^wine_opts=\"\).*\(\"\)$|\1${_args[*]}\2|i;p" $config_file
				else
					new_conf_list+=("wine_opts=${_args[*]}")
				fi
			fi
		fi
		if [[ $insert_section = 1 || $from_config = 0 ]]; then
			local "${new_conf_list[@]}"
			${new_conf}
		fi
	done
	# if conf fiole is new one, send first temp conf to real conf before testing.
	if [ $from_config = 0 ]; then config_file=$tmp_conf; fi 
	# tell to conf file if function module is 'on' or 'off'
	if [ $(printf "${activ_mod[*]}"| grep -c ".*") -gt 0 ]; then
		
		for activ in ${activ_mod[@]}; do
			_A_mod=$(printf "$activ"| cut -d',' -f1) 
			_A_val=$(printf "$activ"| cut -d',' -f2)
			perl -ni -pe "s|(^$_A_mod)=.*$|\1=$_A_val|i" $config_file
		done
	fi
	kill $WAIT_UI_2
#	if [ $from_config = 0 ]; then cp -f -T $tmp_conf $HOME/.winestarter/configs/$bottle_prefix.conf; fi
	if [ $from_config = 0 ]; then cp -f -T $tmp_conf $new_config_file.conf; fi	
	end_game_display
	if [ $? -ge 0 ]; then exit 0; fi
	}
	## wait patiently window
	fn_plz_wait(){
		$yad_bin --width=200 --title "" --text-align=center --no-buttons --window-icon=$img_wine_ui \
		--progress --pulsate --auto-close --text="$vb\\WORKING$end" --progress-text=""
#		WAIT_=$YAD_PID
	}
	## end process window and tab
	end_game_display(){
		unset basic_sets tab_set tab_temp cfg_set t_display form_win 
		# launch default start window
		conf_target=$(printf "$bottle_prefix"|  sed -n "s/^.*[\/.\|.]\(\w*[Aa-Zz]\.\w*[Aa-Zz]*\)/\1/g;p")
		w_title="Wine Starter"
		main_tab_text="$bf Configuration applied to$end $brf$conf_target$end"
		tab_set=(
		"1;_resume;Resume;fn_end_game_1;$img_wine_desk_ui")
#		"2;_resume;Warnings;fn_end_game_2;$img_wine_desk_ui")
		# window style and function
		
		win_type=1
		# create main window variables
		default_tab_create
	}
	fn_end_game_1(){
		# --field="$vb New Wine prefix $end"#$img_wine_add#"Create and config a fresh new Wine prefix":FBTN "$main_cmd_0" \
		unset basic_sets field_list chk_list track_list #conf_dat #track_sets
		res_action="bash $bash_opt \"winestarter "$conf_target".conf\""
		res_launch="$vb Launch Winetarter$end"
		res_special="$vb Launch or relaunch boot features:$end"
#		w_text="$vb\All change are saved to the bootle configuration.\\n\
#You can launch the script now or later by command line from a terminal window :$end\\n\
#$nf\winetstarter $conf_target.conf$end"
		w_text="$vb\All change are saved to the bootle configuration.\\n\
You can launch the script now or later from the desktop file entry (if any) or from a terminal window with the command line:$end\\n\
$nf\winetstarter $conf_target.conf$end"
		w_res_0="Note and warnings : When using this tool, you can occur window crash or freeze. This is a Yad issue that will be hopefuly fix in a near futur."
		basic_sets=(
		"1;;;;;LBL;;;"
		"2;$res_action;;;$res_launch;FBTN;;;"
		"3;;;;;LBL;;;"
		"4;;;;$w_res_0;LBL;;;"
		)
		item_sep='!'
		# start form display
		win_type=1
		ignore_loop=0
		default_win_design
		# create main window variables
	}
	fn_end_game_2(){
		unset basic_sets field_list chk_list track_list #conf_dat #track_sets
		w_text="Blabla"
		w_res_1="Blobloblo"
		basic_sets=(
		"1;;;;$w_res_1;LBL;;;"
		"2;;;;;LBL;;;")
		# start form display
		win_type=1
		ignore_loop=0
		default_win_design
		# create main window variables
	}
	reconf_wine(){		
		# "user_prefix bottle_prefix game_path game_dir game_exe use_winepath wine_path wine_ver"
		echo "2222222222222"
#		if [[ $_var == special_cmd || $_var == wine_elf ]]; then
		if [[ $_var == special_cmd || $_var == start_cmd || $_var == app_portable ]]; then
			if [[ $_val == 'TRUE' ]]; then _val=1; else _val=0; fi
		fi
		if [[ $_var == bottle_prefix ]]; then
			if [[ $_val != $HOME ]]; then _val=$(printf "$_val"| sed -n "s|^.*/||g;p"); else _val=''; fi
		fi
		if [[ $_var == game_path ]]; then
			if [[ $_val != $HOME ]]; then game_key=$(printf "$_val"| \
			sed -n "s|^.*/||g;p"); else _val=''; fi
		fi
		if [[ $_var == game_dir ]]; then
			if [[ $_val != $HOME ]]; then
				game_dir="$_val"
				if [[ $game_key != '' ]]; then
					if [ $(printf "$_val"| grep -c "$game_key") -gt 0 ]; then
						_val=$(printf "$_val"| perl -pe "s|^.*(\w*$game_key)(.*$)|$game_key\2|p")
					fi
				else
					if [ $(printf "$_val"| grep -c "Program\ Files") -gt 0 ]; then
						_val=$(printf "$_val"| sed -n "s|^.*\(Program\ Files$elf_ext/\)\(.*\)$|\2|p")
					else
						_val=$(printf "$_val"| sed -n "s|^.*\(drive_c/\)\(.*\)$|\2|g;p")
					fi
				fi
			else
				_val=''
			fi
		fi
		if [[ $_var == game_exe ]]; then
			if [[ $_val != $HOME ]]; then _val=$(printf "$_val"| sed -n "s|^\($game_dir\)\/\(.*\)$|\2|p")
			else _val=''; fi
		fi
		if [[ $_var == wine_bin ]]; then
			if [[ $_val != unset ]]; then
				if [[ $_val != $wine_ver ]]; then _var=wine_ver; fi
			else
				_val=''
			fi
		fi
		if [ $_extended = 1 ]; then
#			args_list=( '-opengl' '-no-cf-sandbox' )
			if [[ $_val == TRUE || $_val == FALSE ]]; then
				if [[ $_val == TRUE ]]; then
					if [[	$_var == wine_arg_gl ]]; then _args+=('-opengl'); fi
					if [[	$_var == wine_arg_sdx ]]; then _args+=('-no-cf-sandbox'); fi
#					if [[	$_var == wine_arg_msc ]]; then _args+=("$_val"); fi
				fi
			else
				## TODO > to develop in in file query
				if [[ $_val != '' ]]; then if [[	$_var == wine_arg_msc ]]; then _args+=("$_val"); fi; fi
			fi
		fi
		ifs=$IFS
		IFS=$(echo -en "\n\b")
		new_conf_list+=("$_var=$_val")
		IFS=$ifs
		((M++))
		insert=1
	}
	newconf_wine(){
		## create temp file and insert script headers at first config step
		if [ $insert_section = 0 ]; then
			tmp_conf=$(mktemp --tmpdir wine_conf.XXXXXXXX)
			conf_headers="#! /bin/bash\n
##  Winestarter Configurator
##  Fri Feb  10 14:00:00 2017
##  Copyright  2017  PirateProd
##  <wildtruc@noneltd.net>
##  This program is free software; you can redistribute it and/or
##  modify it under the terms of the GNU Lesser General Public
##  License as published by the Free Software Foundation; either
##  version 2.1 of the License, or (at your option) any later version.
##
##  This program is distributed in the hope that it will be useful,
##  but WITHOUT ANY WARRANTY; without even the implied warranty of
##  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
##  Lesser General Public License for more details.
##
##  You should have received a copy of the GNU Lesser General Public
##  License along with main.c;if not, write to the Free Software
##  Foundation, Inc., 51 Franklin Street, Fifth Floor Boston, MA 02110-1301,  USA

## comments with '##' are user help comments
## comments with '#' are unset feature

## Allow extended features for winestarter configurator; off (0), on (1)
_extended=$_extended
"
			## define the config name
			new_config_file=$HOME/.winestarter/configs/$(printf "$bottle_prefix"| sed -n "s/^.//p")
			## print headers in config file
			printf "$conf_headers" > $tmp_conf
			_wine_conf="
## default is $HOME
user_prefix=$user_prefix
## game/appli prefix name
bottle_prefix=\"$bottle_prefix\"
## default system path of the game/appli if not in the chosen Wine prefix
game_path=\"$game_path\"
## Full game dir name in Program Files (including Program Files dir name)
game_dir=\"$game_dir\"
game_exe=\"$game_exe\"
## set if the app is portable or to be installed in C: drive root: no (0), yes (1).
app_portable=$app_portable
## if classic wine command fail, execute .exe inside the directory
special_cmd=$special_cmd
## wine can use \"start\" command to launch apps or installer from absolute path
## useful on old or recalcitrant buggy app.
start_cmd=0
## set a 64 bits bottle: false (0), true (1)
wine_elf=$wine_elf\n
## In some apps, it's possible to send extended options at the end of command line.
## It can be some extra DLLs, game map, etc. Add them here.
wine_opts=\"$wine_opts\"\n
## to lauch winecfg at first launch
w_config=1"
			printf "$_wine_conf\n" >> $tmp_conf
			printf "$_warn_text\n$_fn_var=$_fn_val\n" >> $tmp_conf
		fi
	}
	reconf_wbin(){
		echo "##### reconf_wbin ###### "
		if [[ $_val == TRUE || $_val == FALSE ]]; then
			if [[ $_val == TRUE ]]; then _val=1; else _val=0; fi	
		fi
		if [[ $_var == wine_path ]]; then
			if [[ $_val != $HOME ]]; then 
				if [[ $_val != $user_prefix/.winebin ]]; then 
					_val=$_val
				else
					_val=$user_prefix/.winebin
				fi
			else
				_val=$user_prefix/.winebin
			fi
		fi
		if [[ $_var == wine_ver ]]; then
			if [ -s /tmp/w_bin_tmp ]; then
				_val=$(cat /tmp/w_bin_tmp| sed -n "s/ //p")
				wine_pack=$(printf $_val| cut -d';' -f2)
				_val=$(printf $_val| cut -d';' -f1)	
				if [ $from_config = 1 ]; then
					sed -ni "s|^\(wine_pack\)=\([0-9]\)$|\1=$wine_pack|i;p" $config_file
				fi
			else
				if [[ $_val != $HOME ]]; then
					_val=$(printf "$_val"| sed -n "s|^.*/||g;p")
				else
					_val=''
				fi
			fi
			rm -f /tmp/w_bin_tmp
		fi
		ifs=$IFS
		IFS=$(echo -en "\n\b")
		new_conf_list+=("$_var=$_val")
		IFS=$ifs
		((M++))
		insert=1
	}
	newconf_wbin(){
		_wbin_conf="
## Use a specific Wine path: yes (1), no (0).
use_winepath=$use_winepath
## where is your custom Wine binary, if any 
wine_path=\"$wine_path\"
## custom Wine binary name
wine_ver='$wine_ver'
## Which kind of packages do you want to use:
## PlayOnLinux (0), WineHQ staging (1)
wine_pack=$wine_pack"
		if [ $insert_section = 1 ]; then tmp_conf=$config_file; fi
		printf "$_wbin_conf\n" >> $tmp_conf
		printf "$_warn_text\n$_fn_var=$_fn_val\n" >> $tmp_conf
	}
	reconf_install(){
		echo "##### reconf_install #####"
		if [[ $_val == TRUE ]]||[[ $_val == FALSE ]]; then
			if [[ $_var == w_tricks_opts ]]; then
				if [[ $_val == TRUE ]]; then _val='--no-isolate'; else _val='';fi
			fi
			if [[ $_var == w_install_exe ]]; then
				if [[ $_val == TRUE ]]; then _val=1; A=1; else _val=0; A=0;fi
				activ_mod+=("w_install_exe,$A")
			fi
		else
			_val=$_val
		fi
		if [[ $_var == w_exe_path ]]; then
			exe_key=$(printf "$_val"| sed -n "s|^.*/||g;p")
			if [[ -n $exe_key && $(printf "$_val"| grep -ic ".exe\|.msi") -gt 0 ]]; then
				((M++))
			else
				_val=''
			fi
		fi
		if [[ $_var == w_more_pkgs ]]; then
			if [[ "$_val" != '' && "$_val" != $HOME/ ]]; then				
				if [ $(echo "$_val"| grep -c "\,") -gt 0 ]; then
					_val=$(printf "$_val"| tr ',' '*')
					printf "$_val"| tr '*' '\n' > $conf_edit
					
				else
					printf "$_val" > $conf_edit
				fi
				((M++))
			else
				_val=''
			fi
			if [ $old_val -gt 1 ]; then
				cat $config_file | sed -n "/^w_more_pkgs='/,/'/{;s/.*/w_more_pkgs=''/};p"| \
				uniq > $conf_temp
				
			else
				cat $config_file | sed -n "s/^w_more_pkgs='.*'/w_more_pkgs=''/g;p" > $conf_temp
			fi
			perl -ni -pe "s|^w_more_pkgs=''|w_more_pkgs='$(cat $conf_edit)'|p" $conf_temp
			if [ $insert_section = 0 ]; then
				cat $conf_temp > $config_file
			fi
			insert=0
		fi
		
		if [[ $_var == w_install_zip ]]; then if [ "$_val" == $HOME/ ]; then _val=''; fi; fi
		if [[ $_var == w_install_dir ]]; then 
			if [[ "$_val" != '' ]]; then
				if [[ "$w_install_zip" != '' && "$w_install_zip" != $HOME/ ]]; then
					if [[ $(printf "$w_install_zip"| egrep -c "^.*-") -gt 0 ]]; then
						exe_dir=$(printf "$w_install_zip"| sed -n "s/\([[:alnum:]]*\)-.*$/\1/;s/^.*\///g;p")
						_val=$exe_dir
					fi
					((M++))
				fi
			fi
			if [ "$_val" == $HOME/ ]; then _val=''; fi
		fi
		if [[ $_var == w_download_dir ]]; then if [ "$_val" == $HOME/ ]; then _val=''; fi; fi
		if [[ $_var == w_extra_script ]]; then if [ "$_val" == $HOME/ ]; then _val=''; fi; fi
		ifs=$IFS
		IFS=$(echo -en "\n\b")
		new_conf_list+=("$_var=$_val")
		IFS=$ifs
		insert=1
		}
	newconf_install(){
		if [ $(printf "$w_more_pkgs"| grep -c "*") -gt 0 ]; then w_more_pkgs=$(cat $conf_edit); fi
		if [[ $w_extra_script == $HOME/ ]]; then w_extra_script=''; fi
		_install_conf="
## This option allow to install .exe or .msi through winestarter process.
## It's possible to replace file name path by an internet URL for download it.
w_install_exe=$w_install_exe
## Winetricks options, if any
w_tricks_opts='$w_tricks_opts'
## Full path of the software exe/msi file to install
w_exe_path=\"$w_exe_path\"
## Additional associated dlls or app packages list to install (if any)
w_more_pkgs='$w_more_pkgs'
## In some cases, install is provided by extractible or auto-extractible package
## This option will install them in the provided directory to the Program Files path
w_install_zip=\"$w_install_zip\"
w_install_dir=\"$w_install_dir\"
## Download dir is the user default one, you can change it here.
w_download_dir=\"$w_download_dir\"
## user script: You can add here a personal or a community script (updater, logs, etc)
## It will be automaticaly pasted in the installed app directory.
## This is very optional and at your own risk
w_extra_script=\"$w_extra_script\""
		if [ $insert_section = 1 ]; then tmp_conf=$config_file; fi
		printf "$_install_conf\n" >> $tmp_conf
		printf "$_warn_text\n$_fn_var=$_fn_val\n" >> $tmp_conf
	}
	reconf_tricks(){
		echo "##### reconf_tricks #####"
		if [[ $_val != TRUE ]]&&[[ $_val != FALSE ]]; then
			if [[ $_val != unset ]]; then
				_tricks_var+=("$_val")
			fi
			if [ $(printf "${extra_sets[*]}"| grep -c .) -gt 0 ]; then
				if [ "${#extra_sets[*]}" -gt 1 ]; then
					extra_dlls=$(printf "${extra_sets[*]}"| sed -n "s/\ /,/g;p")
				else
					extra_dlls=${extra_sets[@]}
				fi
				_val="$extra_dlls"
				_tricks_var+=("$_val") 	
			fi	
		fi		
		if [[ $_val == TRUE ]]; then 
			if [ $_var == ie8 ]; then _var='ie8 wininet winhttp'; fi
			_tricks_var+=("$_var")
			A=1
		else
			A=0
		fi
		if [[ $_var == plus_dll ]]; then
			_var=w_tricks_list
			_val=$(printf "${_tricks_var[*]}"|tr ' ' ',')
			((M++))
			A=1
		else
			A=0
		fi
		if [ $A -gt 0 ]; then activ_mod+=("w_install_tricks,$A"); fi
		new_conf_list+=("$_var=$_val")
		insert=1
	}
	newconf_tricks(){
		
		_tricks_conf="
## first install launch and prefix creation (0) already set, (1) first launch
w_install_tricks=1
## Winetricks components list
w_tricks_list=\"$w_tricks_list\""
		if [ $insert_section = 1 ]; then tmp_conf=$config_file; fi
		printf "$_tricks_conf\n" >> $tmp_conf
		printf "$_warn_text\n$_fn_var=$_fn_val\n" >> $tmp_conf
	}
	reconf_reged(){
		echo "##### reconf_reged #####"
#		fn_check_reg(){}
#		fn_make_reg(){}
		if [[ $_val != unset ]]; then
			if [[ $_var == csmt ]]; then
				if [[ $_val == enabled ]]; then _val='00000001'; else _val='00000000'; fi
			fi
			if [[ $(printf "$_val" | grep -o "HKEY") == '' ]]; then
				if [ $(cat $reg_file| grep -c "$_var") -eq 0 ]; then
					if ! [[ $_val =~ ^0{7}+ ]]; then
						_reg_var+=("\"$_var\"=\"$_val\"")
					else
						_reg_var+=("\"$_var\"=dword:$_val")
					fi
				else
					if ! [[ $_val =~ ^0{7}+ ]]; then
						_old_val=$(cat $reg_file| grep "$_var"| sed -n "s/^.*=\"\(.*\)\"$/\1/p")
					else
						_old_val=$(cat $reg_file| grep "$_var"| sed -n "s/^.*=dword:\(.*\)$/\1/p")
					fi
					if [ $_val != $_old_val ]; then
						_chg_var+=("$_var,$_val")
					fi
				fi
			fi
		else
			if [ $(cat $reg_file| grep -c "$_var") -gt 0 ]; then _unset_var+=("$_var"); fi
		fi
		if [[ $_var == user_reg ]]; then
			_reg_header=$(printf "$_val"| perl -pe "s|^(\[.*\])\*(.*)$|\1|p")
			_reg_content=$(printf "$_val"| perl -pe "s|^(\[.*\])\*(.*)$|\2|p")
			_reg_val=$(printf "${_reg_var[*]}"| sed -n "s| |*|g;p")
			if [ $(printf "$_reg_content"| grep -c "option_set") = 0 ]; then
#				if [ $(printf "${_unset_var[*]}"| grep -c .) -gt 0 ]; then
				if [ ${#_unset_var[@]} -gt 0 ]; then
					for _unset in "${_unset_var[@]}"; do
						_reg_content=$(printf "$_reg_content"| \
#						sed -n "s/\(\"$_unset\"\)=\(\"\w*[a-z]*\"\)\(*\|$\)//p")
#						sed -n "s/\(\"$_unset\"\)=\(\(\"[a-z]*\"\)\|\([a-z]*:[0-9]*\)\(\"[0-9]*\"\)\)\(*\|$\)//p")
						sed -n "s/\(\"$_unset\"\)=\(\(\"[a-z]*\"\)\|\([a-z]*:[0-9]\+\)\|\(\"[0-9]\+\"\)\)\(*\|$\)//p")
#						sed -n "s/\"$_unset\"=.*$//g;p")
					done
				fi
				if [ $(printf "${_chg_var[*]}"| grep -c .) -gt 0 ]; then
					for _change in "${_chg_var[@]}"; do
						_ch_var=$(printf "$_change"| cut -d',' -f1)
						_ch_val=$(printf "$_change"| cut -d',' -f2)
						if ! [[ $_ch_val =~ ^0{7}+ ]]; then
							_reg_content=$(printf "$_reg_content"| \
							sed -n "s/\(\"$_ch_var\"\)=\(\"\w*[a-z]*\"\)/\1=\"$_ch_val\"/p")
						else
							_reg_content=$(printf "$_reg_content"| \
							sed -n "s/\(\"$_ch_var\"\)=\([a-z]*.*\)/\1=dword:$_ch_val/p")
						fi
					done
				fi
				if [ $(printf "$_reg_val"| grep -c .) -gt 0 ]; then
					_reg_content="$_reg_content*$_reg_val"
				fi
			else
				_reg_content="$_reg_val"
			fi
			if [ $(printf "$_reg_content"| grep -c .) -gt 0 ]; then
				_val="$_reg_header*$_reg_content"
				if [ $(printf "$_val"| grep -c "*$") -gt 0 ]; then
					_val=$(printf "$_val"| sed -n "s|*$||p")
				fi
				printf "$_val"| sed -n "s|*|\n|g;s|\\\|\\\\\\\|g;p" > $reg_move
				cat $reg_move | sort -u | sed -ne '/\[.*\]/{h;!H;d}; $G;p'| tac > $reg_edit
				((M++))
			else
				_val=''
			fi
			if [ $(cat $config_file | egrep -c "^user_reg=''") -eq 0 ]; then
				cat $config_file | sed -n "/^user_reg='/,/'/{;s/.*/user_reg=''/};p"| \
				uniq > $reg_temp
			else
				cat $config_file > $reg_temp
			fi
			perl -ni -pe "s|^user_reg=''|user_reg='$(cat $reg_edit)'|i" $reg_temp
			if [ $insert_section = 0 ]; then
				cat $reg_temp > $config_file
			fi
		
		fi
		insert=0
		## register file type and create preset. reg creation managed by winestarter
		if [ $_extended = 1 ]; then
			if [[ $_val != unset ]]; then
				if [[ $_var == Selected_Files ]]; then
					unset FileType_list selected_files_list
					ifs=$IFS
					IFS=$(echo -en "\n\b")
#					selected_files_list=$(echo "$Selected_Files"| tr ',' '\n')
					selected_files_list=$(printf "$_val"| sed -n "s/,/ /g;p")
					selected_files_list=( "$selected_files_list" )
					for Files in ${selected_files_list[@]}; do
						if [ $(printf "$local_association"| grep -c .) -gt 0  ]; then
							prev_asso="$local_association,"
							file_ext=$(printf "$Files"| sed -n "s/^.*\.//g;p")
							if [ $(printf "$local_association"| grep -c "$file_ext") -eq 0 ]; then
								mime_type=$(xdg-mime query filetype $Files)
								if [ $(printf "$mime_type"| grep -c .) -gt 0 ]; then
									## define the the reg mime type elements
									_filetype=$(printf "$Files"|sed -n "s/^.*\.//g;p")
									_doctype=$(printf "$_filetype"|sed -n "s/.*/\U&/p")'file'
									## add them to the resource list
									res_mime=$HOME/.winestarter/resources/mime-type.lst
									if [ $(cat $res_mime |grep -c "_doctype") -eq 0 ]; then
										printf "$_filetype:$_doctype:$mime_type\n" >> $res_mime
									fi
									## add the file extension to the config file type section
									FileType_list+=( "$_filetype" )
								fi
							fi
						else
							FileType_list+=( $(printf "$Files"|sed -n "s/^.*\.//g;p") )
						fi
					done
					IFS=$ifs
					_val=$prev_asso$(printf "${FileType_list[*]}"| tr ' ' ',')
					
				fi
				if [[ $_var == mime_preset ]]; then
					unset mime_preset_list mime_preset_add
					mime_preset_list=( $(printf "$mime_preset"| tr ',' ' ') )
					if [ $(printf "$local_association"| grep -c .) -gt 0  ]; then
						for preset in ${mime_preset_list[@]}; do
							if [ $(printf "$local_association"| grep -c "$preset") -eq 0 ]; then
								mime_preset_add+=("$preset")
							fi
						done
						if [ ${#mime_preset_add[@]} -gt 0 ]; then _sep=','; fi
						prev_asso="$local_association$_sep"
						_val=$prev_asso$(printf "${mime_preset_add[*]}"| tr ' ' ',')
					else
						_val=$mime_preset
					fi
					_var='local_association'
				fi
				
			else
				
				if [ $(printf "$local_association"| grep -c .) -eq 0 ]; then _var='local_association'; fi
				_val=''
			fi
			## registering/unregistering part
			# dll_reg_type, dll_elf_type, dll_file_list - misc_reg_type,misc_reg_val
			if [[ $_var == dll_reg_type ]]; then
				if [[ $_val != unset ]]; then reg_proc=1; else reg_proc=0; fi
			fi
			if [ $reg_proc -gt 0 ]; then
				if [[ $_var == dll_reg_type ]]; then
					if [[ $_val == register ]]; then _reg_class=1; else _reg_class=0; fi
				fi
				if [[ $_var == dll_elf_type ]]; then
					if [[ $_val == both ]]; then
						_reg_elf=2
					else if [[ $_val == wine32 ]];then _reg_elf=0; else _reg_elf=1; fi
					fi
				fi
				if [[ $_var == dll_file_list ]]; then
					if [[ $_val != '' ]]; then
							_dlls_list=$(printf "$_val"| tr '#' '\n')
							for _dlls in ${_dlls_list[@]}; do
								_conf_dlls+=( "$(printf "$_dlls"| sed -n "s/^.*\///g;p")," )
							done
						_reg_dlls=$(printf "${_conf_dlls[*]}"| sed -n "s/\ //g;s/\,$//p")
					fi
				fi
				_var=dll_reg_manager
				_val="$_reg_class,$_reg_elf,$_reg_dlls"						
			fi
			if [[ $from_config = 0 || $insert_section = 1 ]]; then
				new_conf_list+=("$_var=$_val")
#				local local_association="$_val"
			else
				insert=1
			fi
		fi
	}
	newconf_reged(){
		_reged_conf="
## extra wine registry specific entry
## leave user_reg blank if none : user_reg=''
## possible values are:
## \"StrictDrawOrdering\"=\"disabled\"
## \"DirectDrawRenderer\"=\"opengl\"
## \"Nonpower2Mode\"=\"repack\"
## \"OffscreenRenderingMode\"=\"fbo\"
## \"RenderTargetLockMode\"=\"auto\"
## \"UseGLSL\"=\"readtex\"
## \"VideoMemorySize\"=\"(memory size of your graphic card)\"
user_reg=''
## Allow local system apps to launch some mime-file type:
local_association=\"$local_association\"
## Register/unsregister DLLs libraies (one arch at a time):
## example: 1,0,foo.dll,poo.dll,
## Where first 1 is register and 0 unregister and secondary 0/1 is wine32/wine64, 2 is both
dll_reg_manager=\"$dll_reg_manager\""
		if [ $insert_section = 1 ]; then tmp_conf=$config_file; fi
		printf "$_reged_conf\n" >> $tmp_conf
		printf "$_warn_text\n$_fn_var=$_fn_val\n" >> $tmp_conf
		
		if [ $(printf "$_val"| grep -c .) -gt 0 ]; then
			perl -ni -pe "s|^user_reg=''|user_reg='$(cat $reg_edit)'|i" \
			$tmp_conf
		fi
	}
	reconf_nvidia_1(){
		echo "##### reconf_nvidia_1 #####"
		unset _FSAA_list
		if [[ $_val != unset ]]; then
			if [[ $_val =~ [a-z]+ ]]; then
				if [ $__GL_FSAA_MODE -gt 0 ]; then
					if [ "$_val" == 'full control' ]; then
						_FSAA_list=("__GL_FSAAAppControlled;0" "__GL_FSAAAppEnhanced;0")
					
					elif [ "$_val" == 'enhanced' ]; then
						_FSAA_list=("__GL_FSAAAppControlled;0" "__GL_FSAAAppEnhanced;1") 
						
					elif [ "$_val" == 'ignored' ]; then
						_FSAA_list=("__GL_FSAAAppControlled;1" "__GL_FSAAAppEnhanced;1") 
				
					fi
					for values in ${_FSAA_list[@]}; do
						_var=$(printf "$values"| cut -d';' -f1)
						_val=$(printf "$values"| cut -d';' -f2)
						if [ $_fn_exist -gt 0 ]; then
							sed -ni "s|^.*\(export.*\w*$_var=\)\(.*\)$|\1$_val|i;p" $config_file
							_val='discard'
						else
							new_conf_list+=("$_var=$_val")
						fi
					done
				fi
			else
				if [ $_val = 0 ]; then
					if [ $_var == __GL_FSAA_MODE ]; then
						_FSAA_list=("__GL_FSAA_MODE" "__GL_FSAAAppControlled" "__GL_FSAAAppEnhanced")
					else
						_FSAA_list=("$_var")
					fi	
					for values in ${_FSAA_list[@]}; do
						if [ $_fn_exist -gt 0 ]; then
						if [ $(cat $config_file| grep -c "#[a-z].*$values") = 0 ]; then	
							sed -ni "s|^.*\(export.*\w*$values=.*\)$|#\1|i;p" $config_file
						fi
						else
							new_conf_list+=("$values=unset")
						fi
					done
				else
					if [ $_fn_exist -gt 0 ]; then
						if [ $_var == __GL_FSAA_MODE ]; then
							if [ $_val = 2 ]; then _val=5
							elif [ $_val = 3 ]; then _val=9
							elif [ $_val = 4 ]; then _val=10
							elif [ $_val = 5 ]; then _val=11
							fi
						fi
						sed -ni "s|^.*\(export.*\w*$_var=\)\(.*\)$|\1$_val|i;p" $config_file
					else
						new_conf_list+=("$_var=$_val")
					fi
				fi
				_val='discard'
			fi
			((M++))
		else
			if [[ $_var =~ __GL_FSAA[a-z]+ ]]; then
				_FSAA_list=("__GL_FSAAAppControlled" "__GL_FSAAAppEnhanced")
			else
				_FSAA_list=("$_var")
			fi
			for values in ${_FSAA_list[@]}; do
				if [ $(cat $config_file| grep -c "#[a-z].*$values") = 0 ]; then
					if [ $_fn_exist -gt 0 ]; then
						sed -ni "s|^.*\(export.*\w*$values=.*\)$|#\1|i;p" $config_file
						_val='discard'
					fi
				else
					new_conf_list+=("$values=unset")
				fi
				
			done
		fi
		insert=1
	}
	newconf_nvidia_1(){
#		nvtemp1=$(mktemp --tmpdir nv1.XXXXXXXX)
		_nvidia_1_conf="
### NVIDIA ENV VARIABLE OPTIONS
## FSAA: Full Scene Anti Aliasing: can be set from 1 to 5:
## off [0], 2x (2xMS) [1], 4x (4xMS) [5], 8x (4xSS, 2xMS) [9], 8x (8xMS) [10], 16x (4xSS, 4xMS) [11]
export __GL_FSAA_MODE=$__GL_FSAA_MODE
## if set, FSAA comes 2 others variables that have to be set as follow respectively :
## To get FSAA full control: [0] [0]
## To get FSAA enhanced for application using multisample : [0] [1]
## To get FSAA controlled by nvidia-setting ignored : [1] [1]
export __GL_FSAAAppControlled=$__GL_FSAAAppControlled
export __GL_FSAAAppEnhanced=$__GL_FSAAAppEnhanced
## FXAA, Fast approximate antialiasing: take avantage over traditional multisampling and
## supersampling methods: (0) (1) 
export __GL_ALLOW_FXAA_USAGE=$__GL_ALLOW_FXAA_USAGE
## anisotropic texture filtering set : off (0), x2 (1), x4 (2), x8 (3), x16 (4)
export __GL_LOG_MAX_ANISO=$__GL_LOG_MAX_ANISO
## synchronize vertical refresh (0), (1)
export __GL_SYNC_TO_VBLANK=$__GL_SYNC_TO_VBLANK
## if libpthread is not enabled by default (ex: wine), 
## it can be force to be set with LD_PRELOAD env variable.
export LD_PRELOAD=\"libpthread.so.0 libGL.so.1\" __GL_THREADED_OPTIMIZATIONS=$__GL_THREADED_OPTIMIZATIONS
## Perfomance from Nvidia Settings tool can be set to gain graphic performance instead of quality
## Quality (1), Mixed (2), Perfomance (3), otherwise comment it to unset.
export __GL_OpenGLImageSettings=$__GL_OpenGLImageSettings"
		nvtemp1=$(mktemp --tmpdir nv1.XXXXXXXX)
		printf "$_nvidia_1_conf\n" > $nvtemp1
		
		nv1_list=(
		"__GL_FSAA_MODE"
		"__GL_FSAAAppControlled"
		"__GL_FSAAAppEnhanced"
		"__GL_ALLOW_FXAA_USAGE"
		"__GL_LOG_MAX_ANISO"
		"__GL_SYNC_TO_VBLANK"
		"__GL_THREADED_OPTIMIZATIONS")
		for var in ${nv1_list[@]}; do
			if [ $(cat $nvtemp1 | grep -c "$var=unset") = 1 ]; then
				sed -ni "s|^.*\(export.*\w*$var\)=.*$|#\1=0|i;p" $nvtemp1
			fi
		done
		if [ $insert_section = 1 ]; then tmp_conf=$config_file; fi
		printf "$_warn_text\n$_fn_var=$_fn_val\n" >> $nvtemp1
		cat $nvtemp1 >> $tmp_conf
	}
	reconf_nvidia_2(){
		echo "##### reconf_nvidia_2 #####"
		if [[ $_val != unset ]]; then
			if [ $_fn_exist -gt 0 ]; then
				if [[ $_val =~ [A-Z]+ ]]; then
					sed -ni "s|^.*\(export.*\w*$_var=\)\(['\|\"]\)\(.*\)\(['\|\"]\)$|\1\2$_val\4|i;p" $config_file
				else
					sed -ni "s|^.*\(export.*\w*$_var\)=\(.*\)$|\1=$_val|i;p" $config_file
				fi
				_val='discard'
			else
				new_conf_list+=("$_var=$_val")
			fi
			
			((M++))
		else
			if [ $(cat $config_file| grep -c "#[a-z].*$_var") = 0 ]; then
				if [ $_fn_exist -gt 0 ]; then
					sed -ni "s|^.*\(export.*\w*$_var=.*\)$|#\1|i;p" $config_file
				fi
				_val='discard'
			else
				new_conf_list+=("$_var=unset")
			fi
		fi
		insert=1
	}
	newconf_nvidia_2(){
#		nvtemp2=$(mktemp --tmpdir nv2.XXXXXXXX)
		_nvidia_2_conf="
### NVIDIA MISCELLENOUS OPTIONS
## VBLANK can't bet set for multi screen, set here one of them only (if needed):
export __GL_SYNC_DISPLAY_DEVICE=\"$__GL_SYNC_DISPLAY_DEVICE\"
## to set or unset X server FBConfig behaviour : unset [0], set [1]
export __GL_SORT_FBCONFIGS=$__GL_SORT_FBCONFIGS
## updating window moves yield, can be useful when some window app have refresh issues,
## value are : normal yield (''), no yield [\"NOTHING\"], background [\"USLEEP\"]
export __GL_YIELD=\"$__GL_YIELD\"
## allow unofficial GLX implmentation. Mostly for debug mode or test, but can be useful
## in some case like Wine : off [0], on [1]
export __GL_ALLOW_UNOFFICIAL_PROTOCOL=$__GL_ALLOW_UNOFFICIAL_PROTOCOL
## if monitor can manage G-SYNC behaviour, this could improve display performance: off [0], on [1].
## Disable __GL_SYNC_TO_VBLANK to get faster performance and also xorg conf options \"stereo\", \"overlays\"
export __GL_GSYNC_ALLOWED=$__GL_GSYNC_ALLOWED
## ignore GLGS extension check. Could be useful in case of some missing extension in appli GL sets.
## This will permit the shaders to be successfuly recompile: to off [0], on [1]
export __GL_IGNORE_GLSL_EXT_REQS=$__GL_IGNORE_GLSL_EXT_REQS"
		nvtemp2=$(mktemp --tmpdir nv2.XXXXXXXX)
		printf "$_nvidia_2_conf" > $nvtemp2
		nv2_list=(
		"__GL_SYNC_DISPLAY_DEVICE"
		"__GL_SORT_FBCONFIGS"
		"__GL_YIELD"
		"__GL_ALLOW_UNOFFICIAL_PROTOCOL"
		"__GL_GSYNC_ALLOWED"
		"__GL_IGNORE_GLSL_EXT_REQS")
		for var in ${nv2_list[@]}; do
			if [ $(cat $nvtemp2 | grep -c "$var.*unset") = 1 ]; then
				if [ $(cat $nvtemp2 | egrep -c "(\s*$var.*['\|\"])") -gt 0 ]; then
					sed -ni "s|^.*\(export.*\w*$var\)=\(['\|\"]\).*\(['\|\"]\)$|#\1=\2\3|i;p" $nvtemp2
				else
					sed -ni "s|^.*\(export.*\w*$var\)=\(.*$\)|#\1=0|i;p" $nvtemp2
				fi
			fi
		done
		if [ $insert_section = 1 ]; then tmp_conf=$config_file; fi
		printf "\n$_warn_text\n$_fn_var=$_fn_val\n" >> $nvtemp2
		cat $nvtemp2 >> $tmp_conf
	}
	reconf_xrandr(){
		echo "##### reconf_xrandr #####"
		if [[ $_var == bck_mode ]]||[[ $_var == set_mode ]]; then
			
			if [[ $_val != unset ]]; then
				if [[ $_var == bck_mode ]]; then
						_val="xrandr --output $monitor --mode $_val --rate 60"
						((M++)); N=1
				fi
				if [[ $_var == set_mode ]]; then
						_val="xrandr --output $monitor --mode $_val --rate 60"
						((M++)); N=$(($N+1))
				fi
			else
				_val=''; N=0
			fi
			if [[ $_var == bck_mode ]]; then _var=bck_xrandr; else _var=set_xrandr; fi
			if [ $N -gt 1 ]; then A=1; N=0; else A=0; fi
			activ_mod+=("auto_set,$A")
		fi
		if [[ $_var == default_desktop ]]||[[ $_var == secondary_desktop ]]; then
			if [[ $_val != unset ]]; then		
				if [[ $_val == mate ]]; then _val='marco'; fi
				if [[ $_val == compiz ]]; then _val='compiz ccp'; fi
				((M++)); N=$(($N+1))
			else
				_val=''; N=0
			fi
#			((A++))
			if [ $N -gt 1 ]; then A=1; N=0; else A=0; fi
			activ_mod+=("set_desktop_env,$A")
		fi
		if [[ $_var == mouse_dev ]]||[[ $_var == set_buttons ]]; then
			if [[ $_val != unset ]]; then
				if [[ $_var == mouse_dev ]]; then
					mice=$(printf "${xinput_list[@]}"| grep "$mouse_dev")
					mice_nm=$(printf "$mice"| cut -d';' -f1)
					mice_id=$(printf "$mice"| cut -d';' -f2|sed -n "s/^.*=//p")
					if [[ $(printf "$mice_nm"| grep -c "$_val") -gt 0 ]]; then
						set_dev_id=$mice_id
					fi
					((M++)); A=1
				fi
				if [[ $_var == set_buttons ]]; then
					_var=mouse_btn
					if [[ $mouse_dev != unset ]]; then
						_val="xinput set-button-map $set_dev_id $_val"
					else
						_val=''; A=0;
					fi
				fi
			else
				_val=''; A=0;
			fi
			activ_mod+=("mouse_set,$A")
		fi
		ifs=$IFS
		IFS=$(echo -en "\n\b")
		new_conf_list+=("$_var=$_val")
		IFS=$ifs
		insert=1
	}
	newconf_xrandr(){
		_xrandr_conf="
## optional xrandr command set, useful when you have strange fullscreen beshavior
## set enable (1) or disable (0)
auto_set=$auto_set
## fullscreen mode for your app ex: xrandr --output HDMI-1 --mode 1280x720 --rate 60
set_xrandr='$set_xrandr'
## your default screen mode
bck_xrandr='$bck_xrandr'

## optional desktop environment replacement:
## This option allow you to replace a buggy enduser graphical environment
## by a lighter one (OpenGl glitch, etc). This suppose a second desktop UI is already installed. 
## set enable (1) or disable (0)
set_desktop_env=$set_desktop_env
## selec the default UI and replacement UI
default_desktop='$default_desktop'
secondary_desktop='$secondary_desktop'
## reverse mouse button  
mouse_set=$mouse_set
mouse_dev='$mouse_dev'
mouse_btn='$mouse_btn'"
		if [ $insert_section = 1 ]; then tmp_conf=$config_file; fi
		printf "$_xrandr_conf\n" >> $tmp_conf
		printf "$_warn_text\n$_fn_var=$_fn_val\n" >> $tmp_conf
	}
	reconf_optimus(){
		echo "1010101010"
		if [[ $_val != TRUE ]]&&[[ $_val != FALSE ]]; then
			if [ $_val != unset ]; then
				if [[ $_var == opti_starter ]]; then ((M++)); A=1; fi
				if [[ $_var == opti_accel ]]; then 
					_val="-b $_val"
					if [[ $opti_starter == primusrun ]]; then _val=''; fi
				fi
				
			else
				A=0; _val=''
			fi
			activ_mod+=("use_optimus,$A")
		else
			if [ $_val == TRUE ]; then _val=1; else _val=0; fi
		fi
		ifs=$IFS
		IFS=$(echo -en "\n\b")
		new_conf_list+=("$_var=$_val")
		IFS=$ifs
		insert=1
	}
	newconf_optimus(){
		_optimus_conf="
## optimus starter with options
## comment if you don't need them
## set the optimus starter : 'optirun', 'primusrun'
opti_starter=\"$opti_starter\"
## If using 'primusrun' or 'Bumblebee default' leave 'accel' blank ('')
## set optirun vitualizer: 'virtualgl', 'primus'
opti_accel=\"$opti_accel\"
## optimus env options
opti_SYNC=$opti_SYNC
## Optimus Vertical sync behavior, prefered is usualy off (0)
## set enable (1) or disable (0)
opti_VBLK=$opti_VBLK"
		if [ $insert_section = 1 ]; then tmp_conf=$config_file; fi
		printf "$_optimus_conf\n" >> $tmp_conf
		printf "$_warn_text\n$_fn_var=$_fn_val\n" >> $tmp_conf
	}
################################
## Yad UI messages and main text	
	messages(){
		main_tab_text="$bf Select settings by theme$end$nf\\n \
 Items or section leave \'unset\' or empty will not be set to the Winestarter config file$end"
		msg_wine="Set a new Wine prefix (mandatory)"
		msg_wcfg="Set a custom Wine binary"
		msg_tricks="Winetricks packages install (Windows packages)"
		msg_install="Install a Windows Software"
		msg_reged="Configure associated Wine registry sets (useful)"
		msg_nvidia1="Set Nvidia common OpenGL options (optional)"
		msg_nvidia2="Set Nvidia miscellenous options (extra)"
		msg_xrandr="Set XRandr game display geometry (optional)"
		msg_optimus="Set optimus specific options (optional)"
		msg_wine_opts="Set Wine specific options (optional)"
		msg_extended="Set extended features (very optional)"
		_warn_text="## Do not remove or edit below except if you don't use winestarter configurator."
	}
## Main Yad function
	fn_create_prefix(){
#		key=$RANDOM
#		unset basic_sets tab_set tab_temp cfg_set t_display form_win
		unset basic_sets field_list chk_list form_win def_win default_win
		unset tab_set tab_temp cfg_set t_display nv_field
		main_tab_text="$bf Select settings by theme$end \\n \
 $nf\\Items or section leave \'unset\' or empty will not be set to the Winestarter config file$end \\n \
 $nf\\Last dowloadable Wine:$end$vb wine32 $pol32, wine64 $pol64$end $nf\\System :$end $vb$sys_version$end"
		w_text="$bf Wine prefix$end\\n \
$vB Set wine prefix name, appli/game directories, etc.$end\\n \
$nf Check here the sections you would like to configure.$end"
		w_title="Wine Start Config"
		w_title1="$vb Nvidia OpenGL options$end"
		w_title2="$vb Miscellenous options$end"
		w_title3="$vb Advanced features$end"
		w_sub_3="Checking this option will allow extended features for advanced users"
#		wine_tip0="$vb Install software feature is highly experimental. For the instance, you need \
#to already know the complete path name of the installed app.$end"
		wine_tip0="$vb Main prefix install sections$end"
		if [ $($lpci_bin| grep -c "NVIDIA") -gt 0 ]; then
			nv_field+=("8;;;;;LBL;;;")
			nv_field+=("9;;;;$w_title1;LBL")
			nv_field+=("10;$_nvidia_1;_nvidia_1;Nvidia*(common);$msg_nvidia1;CHK;;;fn_nvidia_config_1;$img_nv_cm")
			nv_field+=("11;$_nvidia_2;_nvidia_2;Nvidia*(extra)*;$msg_nvidia2;CHK;;;fn_nvidia_config_2;$img_nv_ext")
			nc=11
		else
			nc=7
		fi
		basic_sets=(
		"1;;;;;LBL;;;"
		"2;;;;$wine_tip0;LBL"
		"3;$_wine;_wine;Wine*basics**;$msg_wine;CHK;;;fn_wine_config;$img_wine_cfg1"
		"4;$_wbin;_wbin;Extra*binary**;$msg_wcfg;CHK;;;fn_wine_binary;$img_wine_cfg2"
		"5;$_install;_install;Install*Software;$msg_install;CHK;;;fn_install_soft;$img_install"
		"6;$_tricks;_tricks;Install*tricks**;$msg_tricks;CHK;;;fn_winetricks;$img_tricks"
		"7;$_reged;_reged;Registry*options*;$msg_reged;CHK;;;fn_regedit_config;$img_reged"
		"${nv_field[@]}"
		"$[ $nc+1 ];;;;;LBL;;;"
		"$[ $nc+2 ];;;;$w_title2;LBL"
		"$[ $nc+3 ];$_xrandr;_xrandr;Display*options**;$msg_xrandr;CHK;;;fn_xrandr_config;$img_xrandr"
		"$[ $nc+4 ];$_optimus;_optimus;Optimus*options**;$msg_optimus;CHK;;;fn_optimus_config;$img_opti"
		"$[ $nc+5 ];;;;;LBL;;;"
		"$[ $nc+6 ];;;;$w_title3;LBL"
		"$[ $nc+7 ];;;;$w_sub_3;LBL"
		"$[ $nc+8 ];$_extended;_extended;;$msg_extended;CHK;;;;")
#		"14;$_optimus;_optimus;Optimus;$msg_optimus;CHK;;;fn_optimus_config;$img_opti"
#		"15;$_xrandr;_xrandr;Monitor;$msg_xrandr;CHK;;;fn_xrandr_config;$img_xrandr")
#		"10;$_nvidia_1;_nvidia_1;Nvidia*(common);$msg_nvidia1;CHK;;;fn_nvidia_config_1;$img_nv_cm"
#		"11;$_nvidia_2;_nvidia_2;Nvidia*(extra)*;$msg_nvidia2;CHK;;;fn_nvidia_config_2;$img_nv_ext"
		item_sep=","
		# window style and function
		win_type=0
		ignore_loop=1
		w_width='420'
		main_opts='--height=420 --vscroll-policy=allways'
		extended_opts="--height=400 --scroll"
#		main_opts='--vscroll-policy=allways'
		default_win_design
		# create main window variables
		default_tab_design
		# export main function variables
		default_tab_create
	}
	fn_nvidia_config(){
		unset basic_sets field_list chk_list
		# launch default start window
		w_title="Wine Starter"
		main_tab_text="$bf Reconfigure Nvidia's settings$end$nf\\n \
 Items leave \'unset\' will not be set to the Winestarter config file$end"

		tab_set=(
		"1;_nvidia_1;Nvidia*(common);fn_nvidia_config_1;$img_nv_cm"
		"2;_nvidia_2;Nvidia*(optional);fn_nvidia_config_2;$img_nv_ext")
		item_sep=","
		# window style and function
		win_type=1
		ignore_loop=0
		# create main window variables
		default_tab_create
	}
	fn_basics_config(){
		unset basic_sets tab_set tab_temp cfg_set t_display form_win 
		# launch default start window
		w_title="Wine Starter"
		main_tab_text="$bf Configure Wine initial sets$end$nf\\n \
 It will create a basic Wine bottle, mainly useful if you plan to use an already\\n \
 existing app directory.$end"
		tab_set=(
		"1;_wfirst;Basics;fn_wine_basics;$img_wine_desk_ui")
#		"2;_resume;Warnings;fn_end_game_2;$img_wine_desk_ui")
		item_sep=","
		# window style and function
		win_type=1
		ignore_loop=0
		# create main window variables
#		temp=$(mktemp --tmpdir tab0.XXXXXXXX)
		default_tab_create
	}
	fn_wine_basics(){
		unset basic_sets field_list chk_list track_list #conf_dat #track_sets
		# window messages
		w_wine_basic_tip=""
		w_wine_user_prefix="$vB\\\Set user prefix if not the user's default one:$end"
		w_wine_prefix="$vB\\\Set the Wine Bottle prefix to use:$end"
		w_wine_prefix_tip="$vb\\\Example:$end$nf wine.my_bottle$end, no space and \"$nf\\wine.$end\" suffix is mandatory."
		w_wine_game_path="$vB\\\Set the full game/appli directory if different from bottle:$end"
		w_wine_elf_tip="$nf\\\Note:$end 32bits apps can be launch from a Wine 64bits install (from Wine 2.0 and above). In my own experience, it enhance globaly app performances. (Don't for XP 32bits apps)"
		w_text="$bf\\Configure the Wine basic environment$end"
		
		track_list="user_prefix bottle_prefix game_path wine_elf"

		for trk_set in ${track_list[@]}; do
			unset local_set
			if [[ $trk_set == wine_elf ]]; then trk_box=0; else trk_box="$HOME/"; fi
			local_set+=("$trk_set=$trk_box")
			local $local_set
		done
		
		ifs=$IFS
		IFS=$(echo -en "\n\b")
		basic_sets=(
		"1;;;;;LBL;;;"
		"2;;;;$w_wine_user_prefix;LBL;;;"
		"3;$user_prefix;user_prefix;;$nf Default Wine user prefix$end;DIR;;;"
		"4;;;;$w_wine_prefix;LBL;;;"
		"5;;;;$w_wine_prefix_tip;LBL;;;"
		"6;;bottle_prefix;;$nf Bottle prefix$end;;;;"
		"7;;;;$w_wine_game_path;LBL;;;"
		"8;$game_path;game_path;;$nf Existing appli path$end;DIR;;;"
		"9;;;;$w_wine_elf;LBL;;;"
		"10;;;;$w_wine_elf_tip;LBL;;;"
		"11;$wine_elf;wine_elf;;App type is 64 bits;CHK;;;"
		)
		item_sep=","
		IFS=$ifs
		# window style and function
		win_type=1
		ignore_loop=0
#		w_width='420'
		default_win_design
	}
	fn_wine_elf_query(){
		if [ $wine_elf = 1 ]; then
			elf=64; elf_ext=' (x86)'; w_elf_ext='\ (86)'
		else
			elf=32; elf_ext=''; w_elf_ext=''
		fi
		if ! [ -d $bottle_prefix/drive_c/Program\ Files"$elf_ext" ]; then
			root_key=''
		else
			root_key="Program Files$elf_ext/"
		fi
	}
	## at first launch for a botlle creation, sets the basics variables to access
	## custom path dirs and new Wine dirs
	fn_wine_basic_feed(){
		## initial bottle set before launching main features
			# ';;/home/mike;;wine.botlle;;/home/games/FFXIV/SquareEnix;;;TRUE;'
			ifs=$IFS
			IFS=$(echo -en "\n\b")
			basic_list=('user_prefix,3' 'bottle_prefix,6' 'game_path,8' 'wine_elf,11')
			basic_conf=$(cat $temp)
			for basic in ${basic_list[@]}; do
				unset basic_values
				basic_var=$(printf "$basic"|cut -d',' -f1)
				basic_rank=$(printf "$basic"|cut -d',' -f2)
				basic_val=$(printf "$basic_conf"| cut -d';' -f$basic_rank)
				if [[ $basic_val =~ ^[A-Z]+ ]]; then
					if [ $basic_val = 'TRUE' ]; then basic_val=1; else basic_val=0; fi
				fi
				if [ $basic_var = 'bottle_prefix' ]; then
					basic_val=$user_prefix/.$basic_val
				fi
				basic_values=($basic_var=$basic_val)
				local "${basic_values}" 
			done
			## set default arch
			if [ $wine_elf = 1 ]; then winearch='win64'; else winearch='win32'; fi
			## set default env
			export WINEARCH=$winearch
			export WINEPREFIX="$bottle_prefix"
			wineboot -i
			fn_wine_elf_query
			
			
			if [[ $game_path != '' && $game_path != $HOME ]]; then
				link=$(printf "$game_path"| sed -n "s/^.*\///g;p")
				ln -sf $game_path $bottle_prefix/drive_c/$root_key
				game_dir=$bottle_prefix/drive_c/$root_key$link
				game_exe=$bottle_prefix/drive_c/$root_key$link
			else
				game_dir=$bottle_prefix/drive_c/$root_key
				game_exe=$bottle_prefix/drive_c/$root_key	
			fi
#			special_cmd=0; start_cmd=0
#			if [ $_extended = 1 ]; then
#				wine_arg_gl=0; wine_arg_sdx=0; wine_arg_msc=''
#			fi
			IFS=$ifs
			fn_create_prefix
	} 
	fn_wine_config(){
		unset basic_sets misc_sets field_list chk_list track_list pol_bin_list local_bin_list def_args
		# check install elf type
		fn_wine_elf_query		
		# check already setted variables
		def_args=('wine_arg_gl,opengl' 'wine_arg_sdx,no-cf-sandbox' 'wine_arg_msc,unset')
		if [ $from_config = 1 ]; then
			if [[ $_extended =~ [0-9] ]]; then
				sed -ni "s|^\(_extended\)=\([0-9]\)$|\1=$_extended|i;p" $config_file
			fi
			ifs=$IFS
			IFS=$(echo -en "\n\b")
			bottle_prefix="$user_prefix/$bottle_prefix"
			if [ -d $bottle_prefix/drive_c/$game_dir ]; then
				game_dir="$bottle_prefix/drive_c/$game_dir"
			else
				game_dir="$bottle_prefix/drive_c/Program Files$elf_ext/$game_dir"
			fi
			game_exe="$game_dir/$game_exe"
			if [[ $game_path == '' ]]; then game_path="$HOME/"; fi
			IFS=$ifs
			if [ $_extended = 1 ]; then
				w_args_list=( $wine_opts )
				arg_n="${#w_args_list[@]}"
				def_n="${#def_args[@]}"
				for val in ${def_args[@]}; do
					_def=$(printf "$val"| cut -d',' -f1)
					_arg=$(printf "$val"| cut -d',' -f2)
					if [ $(echo "$wine_opts"| grep -Fc "$_arg") -gt 0 ]; then
						def_arg=("$_def=1")
						g_pat="$g_pat\-$_arg "
					else
						def_arg=("$_def=0")
					fi
					local $def_arg
					if [[ $_def == wine_arg_msc ]]; then
						# better to 'sed' here than anything else
						if [[ $_arg_msc != '' ]]; then
							_arg_msc="\\$(echo -e "${w_args_list[*]}"| sed -n  "s/$g_pat//p")"
							wine_arg_msc=$_arg_msc
						else
							wine_arg_msc=''
						fi
					fi
				done
			fi
		else
			special_cmd=0; start_cmd=0
			if [ $_extended = 1 ]; then
				## TODO > push in a list if more options in displayed list		
	#			for trk in ${def_list(@)}; do
				wine_arg_gl=0; wine_arg_sdx=0; wine_arg_msc='' 
	#			done
			fi
		fi
		
		# window messages
		w_wine_user_prefix="$vB\\Set user prefix if not the user's default one:$end"
		w_wine_prefix="$vB\\Set the Wine Bottle prefix to use:$end"
		w_wine_prefix_tip="$nf\\\Ex:$end wine.my_bottle, no space and \"wine.\" suffix is mandatory."
		w_wine_game_path="$vB\\Set the full game/app path if different from bottle:$end"
		w_wine_game_dir="$vB\\Set full Wine style game/app directory:$end$vn (if already existing)$end"
		w_wine_game_exe="$vB\\Set the Wine game/app executable to launch:$end$vn (if already existing)$end"
		w_wine_portable="$vb\\Set if the game/app is portable or you wish to install an already existing path to the C: drive root:$end"
		w_wine_game_spl="$vb\\Set if the app have to be started from the app directory:$end"
#		w_wine_elf="$vb Set if the app elf type is in 64 bits (experimental):$end"
		w_wine_elf_tip="$nf\\Note:$end The initial install is actually set to Wine $nf"$elf"Bits$end. If you would like a different install type, you need to create a new prefix."
		
		w_wine_cmd="$bf Wine or app command line arguments$end"
		w_wine_cmd_tip="$vb\\You can set here Wine specific command line options. It can come from Wine by itself or specific from the app.$end"
		w_wine_cmd_gl="Force OpenGL only (opengl)"
		w_wine_cmd_sdx="Prevent Steam bottle sandboxing (no-cef-sandbox)"
		w_wine_cmd_msc="$nf Custom cmdline argument$end"
		w_wine_cmd_note="$nf\\Note$end: winestarter will keep all working user commandline options in its user directory for future possible use."
		
		elf=$elf
		ifs=$IFS
		IFS=$(echo -en "\n\b")
		basic_sets=(
		"1;;;;;LBL;;;"
		"2;;;;$w_wine_elf_tip;LBL;;;"
		"3;;;;;LBL;;;"
		"4;;;;$w_wine_user_prefix;LBL;;;"
		"5;$user_prefix;user_prefix;;$nf Default Wine user prefix$end\t\t;DIR;;;"
		"6;;;;$w_wine_prefix;LBL;;;"
		"7;$bottle_prefix;bottle_prefix;;$nf Bottle prefix$end;CDIR;;;"
		"8;;;;$w_wine_game_path;LBL;;;"
		"9;$game_path;game_path;;$nf Existing appli path$end;DIR;;;"
		"10;;;;$w_wine_game_dir;LBL;;;"
		"11;$game_dir;game_dir;;$nf Full Wine appli directory$end;DIR;;;"
		"12;;;;$w_wine_game_exe;LBL;;;"
		"13;$game_exe;game_exe;;$nf EXE file$end;FL;;;"
		"14;;;;$w_wine_portable;LBL;;;"
		"15;$app_portable;app_portable;;Portable app (or to be set at C: drive root);CHK;;;"
		"16;;;;$w_wine_game_spl;LBL;;;"	
		"17;$special_cmd;special_cmd;;execute binary file inside the directory;CHK;;;"
		"18;$start_cmd;start_cmd;;execute binary from absolute path (using Wine \"start\" command);CHK;;;")
#		"16;;;;;LBL;;;"
#		"17;;;;$w_wine_elf_tip;LBL;;;"
#		)
		misc_sets=(
		"17;;;;;LBL;;;"
		"18;;;;$w_wine_cmd;LBL;;;"
		"19;;;;$w_wine_cmd_tip;LBL;;;"
		"20;$wine_arg_gl;wine_arg_gl;;$w_wine_cmd_gl;CHK;;;"
		"21;$wine_arg_sdx;wine_arg_sdx;;$w_wine_cmd_sdx;CHK;;;"
		"22;$wine_arg_msc;wine_arg_msc;;$w_wine_cmd_msc;CBE;$_arg_msc;;"
		"23;;;;$w_wine_cmd_note;LBL;;;"
		)
#		"19;;;;$w_wine_wine_pol;LBL;;;"
#		"20;^unset;wine_bin;;$nf Select package$end;CB;$wine_bin_list;;"
#		)
		if [ $_extended = 1 ]; then
			basic_sets=(
			"${basic_sets[@]}"
			"${misc_sets[@]}"
			)
		fi
		item_sep=","
#		echo "$wine_elf"; exit 0
		IFS=$ifs
		# window style and function
		win_type=1
		ignore_loop=0
#		w_width='420'
		extended_opts="--height=400 --scroll"
		default_win_design
	}
	fn_wine_binary(){
		unset basic_sets field_list chk_list track_list conf_dat pol_bin_list local_bin_list track_sets
		w_wine_use_winepath="$vb Set if you want to use a custom Wine binary path:$end"
		w_wine_binary_title="$vb\\You can choose and activate here a custom Wine binary directory. Some apps (particulary old ones) could need old Wine versions. Datas are provided by PlayOnLinux Wine server.$end"
		w_wine_wine_path="$vb Set full path of customs Wine binaries repository:$end"
		w_wine_wine_ver="$vb Set the custom Wine directory name:$end"
		w_wine_dl_info="$vb\\Here, you can set the download method for the custom Wine binary. You can choose between PlayOnLinux packages (for Wine older than 2.4) or WineHQ-staging packages (above 2.4).$end"
		w_wine_wine_pol="$vb Download a binary package from PlayOnLinux repo:$end"
		w_wine_wconfig="$vb\\When set, new Wine binary will setup new environment, this set will allow winecfg to start at boot:$end"
		w_text="$bf Configure an extra Wine binary path$end"
		# check already setted variables
		track_list="use_winepath wine_path wine_ver"
		wineset_list=$track_list
		wine_bin_cmd="bash $bash_opt \"select_wine_bin\""
		wine_dis_cmd="bash $bash_opt \"select_wine_dis\""
		if [ $wine_elf = 1 ]; then ftp_elf='amd64'; else ftp_elf='x86'; fi
		if [ $from_config = 1 ]; then
			ifs=$IFS
			IFS=$(echo -en "\n\b")
			if [[ $wine_ver != '' ]]; then wine_ver="$wine_path/$ftp_elf/$wine_ver"; else wine_ver="$HOME/"; fi
			if [[ $wine_path == '' ]]; then wine_path="$HOME/.winebin"; fi
			if [[ $use_winepath == '' ]]; then use_winepath=0; fi
			IFS=$ifs
		else
			for trk_set in ${track_list[@]}; do
				unset local_set
				if [[ $trk_set == use_winepath ]]; then trk_box=0; else trk_box="$HOME/"; fi
				local_set+=("$trk_set=$trk_box")
				local $local_set
			done
		fi
		export wine_path=$wine_path
		export wine_elf=$wine_elf
		ifs=$IFS
		IFS=$(echo -en "\n\b")
		basic_sets=(
		"1;;;;;LBL;;;"
		"2;;;;$w_wine_binary_title;LBL;;;"
		"3;$use_winepath;use_winepath;;use Wine binaries path (default:$HOME/.winebin);CHK;;;"
		"4;;;;$w_wine_wine_path;LBL;;;"
		"5;$wine_path;wine_path;;$nf Wine binaries dir\t\t\t\t$end;DIR;;;"
		"6;;;;$w_wine_wine_ver;LBL;;;"
		"7;$wine_ver;wine_ver;;$nf Wine bin name$end;DIR;;;"
		"8;;;;;LBL;;;"
		"9;;;;$w_wine_dl_info;LBL;;;"
		"10;$wine_dis_cmd;;;$vb click here to download from WineHQ staging$end,$img_winedis_bt;FBTN;;;"
		"11;$wine_bin_cmd;;;$vb click here to download a PoL Wine package$end,$img_winepol_bt;FBTN;;;"
		"12;;;;;LBL;;;"
		"13;;;;$w_wine_wconfig;LBL;;;"
		"14;$w_config;w_config;;Start Winecfg at app launch;CHK;;;"
		)
		IFS=$ifs
		item_sep=","
		# window style and function
		win_type=1
		ignore_loop=0
		default_win_design
	}
	fn_regedit_config(){
		unset basic_sets misc_sets field_list chk_list track_list track_sets conf_dat
#		unset basic_sets field_list chk_list track_list #conf_dat #track_sets
		
		# créer liste des dlls désenregistrés
		# créer une option de suppression
		# config file preset
		nv_smi=$(find /usr/{bin,local/bin} -name nvidia-smi)
		if [ -x $nv_smi ]; then
#		if [ -x /usr/bin/nvidia-smi ]||[ -x /usr/local/bin/nvidia-smi ] ; then
			mem_set=$($nv_smi --query|grep -w "^.*Total.*[KMG]iB"|sed -n "s/^.*\ \([0-9]*\) [A-Z].*$/\1/;1p")
			x_mem='unset#'$mem_set
			mem_comment=$mem_set'Mo detected'
		else
			mem_set='unset'
			x_mem='unset'
			mem_comment=''
		fi
#		vid_mem="256,512,768,1024,2048,3072,4096,6144"
		
		vid_mem='128#256#512#768#1024#2048#3072#4096#6144'
		
		reg_file=$(mktemp --tmpdir reg1.XXXXXXXX)
		reg_move=$(mktemp --tmpdir reg2.XXXXXXXX)
		reg_edit=$(mktemp --tmpdir reg3.XXXXXXXX)
		reg_temp=$(mktemp --tmpdir reg4.XXXXXXXX)
		reg_key='HKEY_CURRENT_USER'
		if [ $from_config = 1 ]; then
			if [ $(printf "$user_reg"| grep -c "\[.*\]") -gt 0 ]; then
				extract_reg=$(cat $config_file| sed -n "/^user_reg='/,/'/p"| perl -pe "s|\n|*|g"| \
				perl -pe "s|^(user_reg=')(.*)'\*$|\2|g,s|\*|\n|g,s|\\\|\\\\\\\|;p")
			else
				extract_reg='[HKEY_CURRENT_USER\\Software\\Wine\\Direct3D]'
			fi
			echo -e "$extract_reg\n" > $reg_file
			export reg_file=$reg_file
			
		else
			printf "[HKEY_CURRENT_USER\\\\Software\\\\Wine\\\\Direct3D]*\\\"<option_name>\\\"=\\\"<option_set>\\\"*" > $reg_file
			user_reg=$(cat $reg_file)
		fi
		# convert temp reg file data in usable variables
		reg_values=('StrictDrawOrdering' 'csmt' 'DirectDrawRenderer' 'OffscreenRenderingMode' \
		'UseGLSL' 'CheckFloatConstants' 'VideoMemorySize' 'Nonpower2Mode' 'RenderTargetLockMode' )
#		edit_button="bash $bash_opt \"edit_reg_bin\""
		for reg_var in ${reg_values[@]}; do
			unset reg_variable
			if [ -s $reg_file ]; then
				if [ $(cat $reg_file| grep -c "$reg_var") -gt 0 ]; then
					## check for 'dword' reg file line structure and convert to 'enable/disable' for UI.
					if [ $(cat $reg_file| grep "$reg_var"| grep -c "dword") -eq 0 ]; then
						reg_val=$(cat $reg_file| grep "$reg_var"| sed -n "s|^\"\($reg_var\)\"=\"\(.*\)\"|\2|p")
						## check for video memory reg value. Then, move 'unset' value if needed
						if [ $reg_var == 'VideoMemorySize' ]; then
							if [ $reg_val -gt 0 ]; then
								x_mem=$reg_val
								if [ $mem_set != $reg_val ]; then vid_mem="$mem_set#$vid_mem"; fi
							fi
						fi
					else
						reg_val=$(cat $reg_file| grep "$reg_var"| sed -n "s|^\"\($reg_var\)\"=dword:\(.*\)|\2|p")
						if [[ $reg_val == '00000000' ]]; then reg_val=('disabled'); else reg_val="enabled"; fi
					fi
				else
					reg_val='unset'
				fi
			else
				reg_val='unset'
			fi
			reg_variable+=($reg_var=$reg_val)
			local $reg_variable
		done
		if [ $_extended = 1 ]; then
			if [ -s $HOME/.winestarter/resources/mime-preset.lst ]; then
				res_mime_preset=$(cat $HOME/.winestarter/resources/mime-preset.lst| tr '\n' '#'| \
				sed -n "s/#$//p")
			fi
			dn=28
			reg_log=$bottle_prefix/dlls_reg.log
			if [ -s $reg_log ]; then
				unset dlls_var_list
				dll_base_list=("$(cat $reg_log| cut -d',' -f2)")				
				for dll_base in ${dll_base_list[@]}; do
					if [ $elf = 32 ]; then
						sys_elf='32'
						reg_field_list+=( "$dll_base" )
					else
						sys_elf='32/64'
						if [ $(echo "${reg_field_list[*]}"| egrep -c "$dll_base" ) -eq 0 ]; then
								reg_field_list+=( "$dll_base" )
						fi
					fi
				done
				reg_dlls_field=$(echo "${reg_field_list[*]}"| sed -n "s/\ /\, /g;p")
				reg_dll_msg="$vb\\Registered DLLs ($sys_elf):$end"
				dlls_var_list=( "$[ $dn+1 ];;;;$reg_dll_msg $reg_dlls_field;LBL;;;" )
				dn=$[ $dn+1 ]
				echo "${dlls_var_list[@]}"
			fi
		fi
			
		# window messages
		w_text="$bf Edit the Wine registry$end\\n\
$vB\\Set here the most usual registry Direct3D graphic options$end\\n\
$vB\\or edit a file manualy (will be merge with others sets)$end" #\\n \
		w_reg_manual0="$rb\\WARNNG:$end$vn Direct3D registry config is only usable under WindowsXP bottle$end"
		w_reg_manual1="$vB Custom Direct3D registering (manual edit).$end"
		w_reg_manual2="$rb\\WARNING:$end$vn Remove all custom (set by yourself) or empty lines$end"
		w_reg_manual3="$bf\\Unusual registry commands and options$end"

		w_reg_2_title="$bf\\Associate mime type to local system$end"
		w_reg_2_tip0="$vb\\In many case, user must install subsidiary software to run some file type directly from the bottle (avi, mp4, txt, doc, etc). You can set here those files types to be launch by your local system apps.$end"

		w_reg_2_warn0="$vn\\Files will be open with default xdg-open environment set$end"
		w_reg_2_setted="$vb\\Already associated:$end $(printf "$local_association"| sed -n 's/,/, /g;p')"
		w_reg_2_set_tip0="$vb\\Use presets or edit manually$end:$vn (will be added to presets)$end"
		w_reg_2_set_tip1="$rb\\WARNING$end$vn : When picked up from a directory, files types need to be of the same kind (mp4, avi or doc, odf, etc), this is mandatory.$end"
		w_reg_2_set_1="$nf Select one or more files for type$end"
		w_reg_2_set_2="$nf or pick a preset in the list$end"
		w_reg_2_set_4="Set local program to use"

		w_reg_3_tip0="$vb\\In some cases, it could be necessary to use specific system reg file, DLLs registration/unregistration to set properly a bottle.$end"
		w_reg_3_warn0="$rb\\WARNING$end$vn: Doing something nasty here can strongly compromise your bottle.$end"
		w_reg_3_titl0="$vb\\Register, unregister specific DLLs:$end"
		w_reg_3_cmd0="$nf Select the operation class$end"
		w_reg_3_cmd1="$nf Select the system type$end"
		w_reg_3_cmd2="$nf Select the DLL (one or more)$end"
		w_reg_3_tit1e="$vb\\Create a specific reg file$end"
		w_reg_3_cmd3="$nf Select the type$end"
		w_reg_3_cmd4="$vb\\Write the custom registration without the key line$end"
		w_reg_3_tip=""
		
		w_reg_def_SDO="$nf StrictDrawOrdering$end$vn\tbelow Wine 2.6$end"
		w_reg_def_CSMT="$nf CSMT$end$vn \t\t\t\tWine 2.6 and above$end"
#		w_reg_def_VID="$nf VideoMemorySize$end$vn     unset to not use$end"
		w_reg_def_VID="$nf VideoMemorySize$end$vn  $mem_comment$end"
#		w_reg_def_=""
#		w_reg_def_=""
#		w_reg_def_=""
#		w_reg_def_=""
#		w_reg_def_=""
#		
		
		basic_sets=(
		"1;;;;;LBL;;;"
		"2;;;;$w_reg_manual0;LBL;;;"
		"3;$StrictDrawOrdering;StrictDrawOrdering;;$w_reg_def_SDO;CB;enabled#disabled;;"
		"4;$csmt;csmt;;$w_reg_def_CSMT;CB;enabled#disabled;;"
		"5;$DirectDrawRenderer;DirectDrawRenderer;;$nf DirectDrawRenderer$end;CB;opengl#gdi;;"
		"6;$OffscreenRenderingMode;OffscreenRenderingMode;;$nf OffscreenRenderingMode$end;CB;backbuffer#fbo;;"
		"7;$RenderTargetLockMode;RenderTargetLockMode;;$nf RenderTargetLockMode$end;CB;auto#disabled#readdraw#readtex#texdraw#textex;;"
		"8;$UseGLSL;UseGLSL;;$nf UseGLSL$end;CB;enabled#disabled;;"
		"9;$CheckFloatConstants;CheckFloatConstants;;$nf CheckFloatConstants$end;CB;enabled#disabled;;"
		"10;$Nonpower2Mode;Nonpower2Mode;;$nf Nonpower2Mode$end;CB;repack;;"
		"11;$x_mem;VideoMemorySize;;$w_reg_def_VID;CBE;$vid_mem;;"
		"12;;;;$w_reg_manual1;LBL;;;"
		"13;;user_reg;;$w_reg_manual2;TXT;;;"
		)
		misc_sets=(
		"14;;;;;LBL;;;"
		"15;;;;$w_reg_2_title;LBL;;;"
		"16;;;;$w_reg_2_tip0;LBL;;;"
		"17;;;;$w_reg_2_warn0;LBL;;;"
		"18;;;;$w_reg_2_set_tip1;LBL;;;"
		"19;;;;$w_reg_2_set_tip0;LBL;;;"
		"20;;;;$w_reg_2_setted;LBL;;;"
		"21;unset;Selected_Files;;$w_reg_2_set_1;MFL;;;"
		"22;unset;mime_preset;;$w_reg_2_set_2;CB;$res_mime_preset;;"
		"23;;;;;LBL;;;"
		"24;;;;$w_reg_manual3;LBL;;;"
		"25;;;;$w_reg_3_tip0;LBL;;;"
		"26;;;;$w_reg_3_warn0;LBL;;;"
		"27;;;;;LBL;;;"
		"28;;;;$w_reg_3_titl0;LBL;;;"
		"${dlls_var_list[@]}"
		"$[ $dn+1 ];unset;dll_reg_type;;$w_reg_3_cmd0;CB;register#unregister;;"
		"$[ $dn+2 ];unset;dll_elf_type;;$w_reg_3_cmd1;CB;wine32#wine64#both;;"
		"$[ $dn+3 ];$bottle_prefix/drive_c/windows;dll_file_list;;$w_reg_3_cmd2;MFL;;;"
		)
#		"$[ $dn+4 ];;;;;LBL;;;"
#		"$[ $dn+5 ];;;;$w_reg_3_title;LBL;;;"
#		"$[ $dn+6 ];unset;misc_reg_type;;$w_reg_3_cmd3;CB;user#system;;"
#		"$[ $dn+7 ];;misc_reg_val;;$w_reg_3_cmd4;TXT;;;"
#		${previous_reg_edit[@]}
#		) 
#		"$[ $dn+8 ];$edit_button;user_reg;;$w_reg_manual1;FBTN;;;"
#		)
		if [ $_extended = 1 ]; then
			basic_sets=(
			"${basic_sets[@]}"
			"${misc_sets[@]}"
			)
		fi
		item_sep="#"
		# start form display
		win_type=1
		ignore_loop=0
#		extended_opts="--height=450 --scroll"
		extended_opts='--height=400 --scroll'
		default_win_design
		# create main window variables
	}
	fn_winetricks(){
		unset basic_sets field_list chk_list track_list track_sets conf_dat
		# change wintricks button color for first edition or missing, then confiug presets
		w_tricks_bin=$(find /usr/{bin,local/bin} -name winetricks)
		if [ -x "$w_tricks_bin" ]; then
#		if [[ -x "/usr/bin/winetricks" || -x "/usr/local/bin/winetricks" ]]; then
			if [[ -d $bottle_prefix || $from_config = 1 ]]; then
				st=$vb
				trk_action="bash $bash_opt \"$w_tricks_bin --gui &>/dev/null\""
				## set default arch
				if [ $wine_elf = 1 ]; then winearch='win64'; else winearch='win32'; fi
				## set default env
				export WINEARCH=$winearch
				export WINEPREFIX="$bottle_prefix"
				## now look for already setted and put them in a tmp file
				trk_file=$(mktemp --tmpdir trk.XXXXXXXX)
				$w_tricks_bin dlls list| grep "downloadable" >$trk_file
				dlls_list=$(cat $trk_file| awk '{print $1}'| tr '\n' ',')
			fi
		else
			w_tricks_trk_launch="$rb Winetricks not found, install it first.$end"
			st=$gb
			trk_action=''
		fi

		# check already setted variables
		track_list="d3dx9,d3dx10,d3dx11_42,d3dx11_43,xact_jun2010,vcrun6,vcrun2010,vcrun2012,vcrun2013,\
		mfc40,mfc42,physx,corefonts,ie8,dotnet35,dotnet40"
		track_list=$(printf "$track_list"|tr ',' '\ ')
		if [ $from_config = 1 ]; then
			track_sets=$(printf "$w_tricks_list"|sed -n "s/^.*=\"//;s/\"$//g;p"|tr ',' '\ ')
		fi
		for trk_set in ${track_list[@]}; do
			if [ $from_config = 1 ]; then
				conf_set=$(printf "${track_sets[@]}"| grep -o "$trk_set")
				if [[ $conf_set != '' ]]; then
					trk_box=1
				else
					trk_box=0
				fi
			else
				trk_box=0
			fi
			conf_dat+=("$trk_set=$trk_box")
		done
		# create a list including extra install dlls from winetricks list
		if [ $from_config = 1 ]; then
			for trk_var in ${track_sets[@]}; do
#				if [ $(printf "${track_list}"| grep -c "$trk_var") -eq 0 ];then
				if [ $(printf "${track_list}"| grep -c "$trk_var") -eq 0 ];then
				extra_sets+=("$trk_var")
				fi
			done
		fi
		local "${conf_dat[@]}"
		# display already installed packages
		if [ $(printf "$w_tricks_list"| grep -c .) -gt 0 ]; then
			already_there=$(printf "$w_tricks_list"| sed -n "s/,/, /g;p")
		else
			already_there='none'
		fi
		# window messages
		w_text="$bf Winetricks common apps and DLLs$end\\n$vb\\Set the most common Windows packages available in Winetricks needed by your app.$end"
		w_tricks_cm_packs="$vb\\Most common packages (usualy mandatory):$end"
		w_tricks_cm_d3d="$nf Direct3D packages$end$rb ( DX11 only available for Win7 and above)$end"
		w_tricks_cm_3d9="Direct3D version 9"
		w_tricks_cm_3d10="Direct3D version 10"
		w_tricks_cm_3d11_1="Direct3D version 11 (42)"
		w_tricks_cm_3d11_2="Direct3D version 11 (43)"
		w_tricks_cm_xact="$vb\\Xact is mostly needed for Direct3D 9 packages$end"
		w_tricks_cm_vcruntime="$vb\\Visual C++ runtime libraries (vcrun)$end"
		w_tricks_cm_vcr6="Visual C++ runtime v.6 (vcrun6)"
		w_tricks_cm_vcr10="Visual C++ runtime 2010"
		w_tricks_cm_vcr12="Visual C++ runtime 2012"
		w_tricks_cm_vcr13="Visual C++ runtime 2013"
		w_tricks_cm_vc_found="$vb\\MS Foundation Class (mfc), often called by Visual C++ apps$end"
		w_tricks_cm_m40="mfc40 library"
		w_tricks_cm_m42="mfc42 library"
		w_tricks_cm_phy="$vb\\PHYSX Nvidia package: can be very useful to improve  performance$end"
		w_tricks_cm_font="$vb\\Windows full corefonts package: improve Wine fonts display (very useful)$end"
		w_tricks_alt_packs="$vb\\Alternative packages (needed in particular cases):$end"
		w_tricks_alt_ie8="IE8 pack in case GECKO mozilla package failed to load HTML pages"
		w_tricks_alt_dot3="Dot NET version 3.5"
		w_tricks_alt_dot4="Dot NET version 4.0"
		w_tricks_alt_dot4_tip="$nf\\Note$end: .NET 4.x need an extra additional packges for clean install. Follow Winetrciks instruction during install without stopping the process."
		w_tricks_winetricks="$bf More from Winetricks$end"
		w_tricks_trk_launch="$vb Click to launch Winetricks separatly$end"
		w_tricks_trk_dll="$vb\\or launch Winetricks$end $nf(one or more packages)$end"
		w_tricks_trk_dlls="$vb Add an additional DLL component$end"
		w_tricks_ald_list="$vb\\Already installed:$end $already_there"
#		exit 0
		# var list sets
		basic_sets=(
		"1;;;;$w_tricks_ald_list;LBL;;"
		"2;;;;;LBL;;;"
		"6;;;;$w_tricks_cm_packs;LBL;;;"
		"4;;;;$w_tricks_cm_d3d;LBL;;;"
		"5;$d3dx9;d3dx9;;$w_tricks_cm_3d9;CHK;;d3dx9;"
		"6;$d3dx10;d3dx10;;$w_tricks_cm_3d10;CHK;;d3dx10;"
		"7;$d3dx11_42;d3dx11_42;;$w_tricks_cm_3d11_1;CHK;;d3dx11_42;"
		"8;$d3dx11_43;d3dx11_43;;$w_tricks_cm_3d11_2;CHK;;d3dx11_43;"
		"9;;;;$w_tricks_cm_xact;LBL;;;"
		"10;$xact_jun2010;xact_jun2010;;xact_jun2010;CHK;;xact_jun2010;"
		"11;;;;$w_tricks_cm_vcruntime;LBL;;;"
		"12;$vcrun6;vcrun6;;$w_tricks_cm_vcr6;CHK;;vcrun6;"
		"13;$vcrun2010;vcrun2010;;$w_tricks_cm_vcr10;CHK;;vcrun2010;"
		"14;$vcrun2012;vcrun2012;;$w_tricks_cm_vcr12;CHK;;vcrun2012;"
		"15;$vcrun2013;vcrun2013;;$w_tricks_cm_vcr13;CHK;;vcrun2013;"
		"16;;;;$w_tricks_cm_vc_found;LBL;;;"
		"17;$mfc40;mfc40;;$w_tricks_cm_m40;CHK;;mfc40;"
		"18;$mfc42;mfc42;;$w_tricks_cm_m42;CHK;;mfc42;"
		"19;;;;$w_tricks_cm_phy;LBL;;;"
		"20;$physx;physx;;Nvidia PhysX;CHK;physx;;"
		"21;;;;$w_tricks_cm_font;LBL;;;"
		"22;$corefonts;corefonts;;Windows core fonts;CHK;;corefonts;"
		"23;;;;$w_tricks_alt_packs;LBL;;;"
		"24;;;;;LBL;;;"
		"25;$ie8;ie8;;$w_tricks_alt_ie8;CHK;;;"
		"26;$dotnet35;dotnet35;;$w_tricks_alt_dot3;CHK;;;"
		"27;$dotnet40;dotnet40;;$w_tricks_alt_dot4;CHK;;;"
		"28;;;;$w_tricks_alt_dot4_tip;LBL;;;"
		"29;;;;;LBL;;;"
		"30;;;;$w_tricks_winetricks;LBL;;;"
		"31;^unset;plus_dll;;$w_tricks_trk_dlls;CB;$dlls_list;;"
		"32;;;;$w_tricks_trk_dll;LBL;;;"
		"33;$trk_action;;;$w_tricks_trk_launch,$img_tricks_bt;FBTN;;;"
		)
		item_sep=","
		# start form display
		win_type=1
		ignore_loop=0
#		extended_opts='--scroll --columns=2 --output-by-row'
#		main_opts='--height=500 --vscroll-policy=allways'
		extended_opts='--height=400 --scroll'
		default_win_design
		# window style and function
	}
	fn_install_soft(){
		unset basic_sets misc_sets chk_list field_list
		# window messages
		w_text="$bf\\Software install$end\\n\
$vb\\This feature allow you to install a software at WineStarter launch$end\\n\
$vb\\It will work in most cases, but could fail before the end of process$end\n\
$nf\\TIP:$end For downloading, you can replace file name path by internet URL."
		w_tricks_trk_exe="check here to activate install process"
		w_tricks_ins_exe="$nf Select the .exe/.msi package to install$end"
		w_tricks_trk_opt="$vb Winetricks command line options:$end"
		w_tricks_trk_opt0="option (--no-isolate): force Winetricks to not create its own prefix"
		w_tricks_trk_tip0="$vb\\User prefix and wine bottle have to be already set in Wine tab.$end"
		w_tricks_trk_tip1="$nf\\Note:$end Steam Winetricks package is usualy broken, download it by your own if needed."
		w_more_pkgs0="$bf\\More packages$end"
		w_more_pkgs1="$vb\\If you have to install associated package or other dlls from separate source and not available in Winetricks, select them here$end"
		w_more_pkgs2="$nf Select one or more$end"
		w_more_zip0="$bf\\Alternative install type$end"
		w_more_zip1="$vb\\In some cases, install is provided by a compressed file (zip, rar, 7z, exe) extracted or to extract directly to the bottle Program File directory. Manage them here.$end"
		w_more_zip2="$nf\\Note$end: for auto-extractible exe file, create the directory first. Name with a '$nf-$end' after the first word will be auto-detected."
		w_more_zip3="$nf Select the compressed file to install$end"
		w_more_zip4="$nf Select or create the target directory$end"
		w_more_dl0="$bf\\Download directory option$end"
		w_more_dl1="$vb\\By default, download will be stocked in user default dowload directory. You can set a different one here.$end"
		w_more_dl2="$nf Select dowload directory$end"
		w_more_scpt0="$bf\\User script$end"
		w_more_scpt1="$vb\\In very rare case, some users wish to add script to their app directory (updator,log collector, etc), this is the place to do so.$end"
		w_more_scpt2="$rb\\WARNING$end:$nf Choose wisely, this is at your own risk.$end"
		w_more_scpt3="$nf Select a script (bash, python, etc) $end"
		
		if [ $from_config = 0 ]||[[ $w_install_exe == '' ]]; then w_install_exe=0; fi
		if [[ $w_tricks_opts != '' ]]; then w_tricks_opts=1; else w_tricks_opts=0; fi
		if [ "$w_exe_path" == '' ]; then w_exe_path="$HOME/"; fi
		
		conf_old=$(mktemp --tmpdir pkg0.XXXXXXXX)
		conf_edit=$(mktemp --tmpdir pkg1.XXXXXXXX)
		conf_temp=$(mktemp --tmpdir pkg2.XXXXXXXX)
		
		if [ "$w_more_pkgs" == '' ]; then
			w_more_pkgs="$HOME/"
			old_val=0
		else
#			if [ $(cat $config_file|sed -n "/^w_more_pkgs='/,/'/p"| grep -c .) -gt 0 ]; then
			if [ $(cat $config_file|sed -n "/^w_more_pkgs='.*'/p"| grep -c .) -lt 1 ]; then
				cat $config_file|sed -n "/^w_more_pkgs='/,/'/p"| tr '\n' ','| \
				sed -n "s/w_more_pkgs=//;s/'//g;s/,$//p" > $conf_old
				local w_more_pkgs=$(cat $conf_old)
#				cat $config_file|sed -n "/^w_more_pkgs='/,/'/p"| tr '\n' ','| \
#				sed -n "s/'//g;s/,$//p" > $conf_old
				old_val=2
			else
				printf "$w_more_pkgs" > $conf_old
				local w_more_pkgs=$(cat $conf_old)
				old_val=1
			fi
#			old_val_multi=$(cat $config_file|sed -n "/w_more_pkgs='/,/'/p"| grep -c .)
#			old_val=$(cat $config_file|sed -n "/w_more_pkgs='.*'/p"| grep -c .)
#			if [ $(cat $config_file| grep -c "$w_more_pkgs") -gt 1 ]; then
#			if [ $(cat $conf_old| grep -c .) -eq 1 ]; then
#				local w_more_pkgs=$(cat $conf_old)
#				old_val=1
#			if [ $(cat $config_file|sed -n "/w_more_pkgs='.*'/p"| grep -c .) -le 1 ]; then
#				local $(cat $config_file|sed -n "/^w_more_pkgs='.*'/p"| sed -n "s/'//g;p")
#				old_val=0
#			else
#				local $(cat $conf_old| tr '\n' '#')
#				cat $config_file|sed -n "/^w_more_pkgs='/,/'/p"| tr '\n' '#'| \
#				sed -n "s/'//g;s/#$//p" > $conf_old
#				local $(cat $config_file|sed -n "/^w_more_pkgs='/,/'/p"| tr '\n' '#'| \
#				sed -n "s/'//g;s/#$//p")
#				old_val=2
#			fi
#			exit 0
#			old_val="$w_more_pkgs"
#			w_more_pkgs=$(printf "$w_more_pkgs"|tr '\n' '#')
		fi
		if [ "$w_install_zip" == '' ]; then w_install_zip="$HOME/";	fi
		if [ "$w_install_dir" == '' ]; then w_install_dir="$HOME/";	fi
		if [ "$w_extra_script" == '' ]; then w_extra_script="$HOME/"; fi
		if [ "$w_download_dir" == '' ]; then w_download_dir="$HOME/"; fi
		
		pre_list=0
		# var list sets
		basic_sets=(
		"1;;;;;LBL;;;"
		"2;;;;$w_tricks_trk_tip1;LBL;;;"
		"3;;;;$w_tricks_trk_tip0;LBL;;;"
		"4;;;;;LBL;;;"
		"5;$w_install_exe;w_install_exe;;$w_tricks_trk_exe;CHK;;;"
		"6;;;;;LBL;;;"
		"7;$w_exe_path;w_exe_path;;$w_tricks_ins_exe;MFL;;_w_soft;"
		"8;;;;;LBL;;;"
		"9;;;;$w_tricks_trk_opt;LBL;;;"
		"10;$w_tricks_opts;w_tricks_opts;;$w_tricks_trk_opt0;CHK;;;"
		"11;;;;;LBL;;;"
		"12;;;;$w_more_pkgs0;LBL;;;"
		"13;;;;$w_more_pkgs1;LBL;;;"
		"14;$w_more_pkgs;w_more_pkgs;;$w_more_pkgs2;MFL;;;"
		"15;;;;;LBL;;;"
		"16;;;;$w_more_zip0;LBL;;;"
		"17;;;;$w_more_zip1;LBL;;;"
		"18;;;;$w_more_zip2;LBL;;;"
		"19;$w_install_zip;w_install_zip;;$w_more_zip3;MFL;;;"
		"20;$w_install_dir;w_install_dir;;$w_more_zip4;CDIR;;;"
		"21;;;;;LBL;;;"
		"22;;;;$w_more_dl0;LBL;;;"
		"23;;;;$w_more_dl1;LBL;;;"
		"24;$w_download_dir;w_download_dir;;$w_more_dl2;CDIR;;;"
		)
		misc_sets=(
		"25;;;;;LBL;;;"
		"26;;;;$w_more_scpt0;LBL;;;"
		"27;;;;$w_more_scpt1;LBL;;;"
		"28;;;;$w_more_scpt2;LBL;;;"
		"29;$w_extra_script;w_extra_script;;$w_more_scpt3;FL;;;"
		)
		if [ $_extended = 1 ]; then
		basic_sets=(
		"${basic_sets[@]}"
		"${misc_sets[@]}"
		)
		fi
		item_sep=","
#		echo "${basic_sets[@]}"
#		exit 0
		# start form display
		win_type=1
		default_win_design
		# window style and function
	}
	fn_nvidia_config_1(){
		unset basic_sets field_list chk_list conf_dat track_list #track_sets
		# window messages
		w_nv_tip0="$vB All variable are unset by default. (0) mean 'off' (1) means 'on'.$end"
#		w_nv_fsaamod0="$vB Full Scene Anti Aliasing, from 0 (off) to 5 (16x) : (1) 2x (2xMS)[1], (2) 4x (4xMS)[5], (3) 8x (4xSS/2xMS)[9], (4) 8x (8xMS)[10], (5) 16x (4xSS/4xMS)[11]$end"
		w_nv_fsaamod0="$vB Full Scene Anti Aliasing, from 0 (off) to 5 (16x) : (1) 2x (2xMS), (2) 4x (4xMS), (3) 8x (4xSS/2xMS), (4) 8x (8xMS), (5) 16x (4xSS/4xMS)$end"
		w_nv_fsaactrl0="$vB If set, FSAA comes with 2 others arguments:$end"
		w_nv_fsaactrl1="$nf Full controlled, enhanced if using multisample or ignored (manage by nvidia-setting)$end"
		w_nv_fxaa0="$vB This will allow (not force) Fast Approximate Antialiasing: multisampling and supersampling methods$end"
		w_nv_aniso="$vB Anisotropic texture filtering set: off (0), x2 (1), x4 (2), x8 (3), x16 (4)$end"
		w_nv_vblank="$vB Synchronize vertical diplay refresh$end"
		w_nv_thread="$vB Libpthread is not usualy enable in Wine, you can force it to prelaod$end"
		w_nv_perf="$vB Performance can be set between Quality(1), Mixed(2) Performance(3)$end"

		# check already setted variables
		if [ $from_config = 1 ]; then
			if [ $__GL_FSAA_MODE -gt 0 ]; then
				if [ $__GL_FSAA_MODE = 5 ]; then __GL_FSAA_MODE=2
				elif [ $__GL_FSAA_MODE = 9 ]; then __GL_FSAA_MODE=3
				elif [ $__GL_FSAA_MODE = 10 ]; then __GL_FSAA_MODE=4
				elif [ $__GL_FSAA_MODE = 11 ]; then __GL_FSAA_MODE=5
				fi
			fi
			if [ $__GL_FSAA_MODE -gt 0 ]; then
				if [ $__GL_FSAAAppControlled = 0 ]&&[ $__GL_FSAAAppEnhanced = 0 ]; then
#					__GL_FSAA_CTRL=1
					__GL_FSAA_CTRL='full control'
				elif [ $__GL_FSAAAppControlled = 0 ]&&[ $__GL_FSAAAppEnhanced = 1 ]; then
#					__GL_FSAA_CTRL=2
					__GL_FSAA_CTRL='enhanced'
				elif [ $__GL_FSAAAppControlled = 1 ]&&[ $__GL_FSAAAppEnhanced = 1 ]; then
#					__GL_FSAA_CTRL=3
					__GL_FSAA_CTRL='ignored'
				else
					__GL_FSAA_CTRL='unset'
				fi
			else
				__GL_FSAA_CTRL='unset'
			fi
			
		else
			__GL_FSAA_CTRL='unset'
		fi
		#export __GL_OpenGLImageSettings=2
		track_list=(
		"__GL_FSAA_MODE"
		"__GL_ALLOW_FXAA_USAGE"
		"__GL_LOG_MAX_ANISO"
		"__GL_SYNC_TO_VBLANK"
		"__GL_THREADED_OPTIMIZATIONS"
		"__GL_OpenGLImageSettings")
		for trk_set in ${track_list[@]}; do
			unset conf_dat
			if [ $from_config = 1 ]; then
				trk_box=$(cat $config_file| grep "$trk_set"| sed -n "s/^\(.*=\)\(.*\)$/\2/p")
			fi
			if [ $from_config = 0 ]||[[ $trk_box == '' ]]; then
				trk_box='unset'
				conf_dat+=("$trk_set=$trk_box")
				local $conf_dat	
			fi
		done
		# var list sets
		w_title="Wine Start Config"
		w_text="$bf Configure Nvidia OpenGL options$end"
		basic_sets=(
		"1;;;;$w_nv_tip0;LBL;;;"
		"2;;;;;LBL;;;"
		"3;;;;$w_nv_fsaamod0;LBL;;;"
		"4;$__GL_FSAA_MODE;__GL_FSAA_MODE;;$nf Full scene antialiasing$end;NUM;0..5;FSAA_mod;"
		"5;;;;$w_nv_fsaactrl0;LBL;;;"
		"6;;;;$w_nv_fsaactrl1;LBL;;;"
		"7;$__GL_FSAA_CTRL;__GL_FSAAA_CTRL;;$nf FSAA control type$end;CB;full control,enhanced,ignored;FSAA_ctrl;"
		"8;;;;$w_nv_fxaa0;LBL;;;"
		"9;$__GL_ALLOW_FXAA_USAGE;__GL_ALLOW_FXAA_USAGE;;$nf Fast approximate antialiasing (FXAA)\t$end;CB;0,1;FXAA_use;"
		"10;;;;$w_nv_aniso;LBL;;;"
		"11;$__GL_LOG_MAX_ANISO;__GL_LOG_MAX_ANISO;;$nf Anisotropic texture filtering$end;NUM;0..4;ANISO;"
		"12;;;;$w_nv_vblank;LBL;;;"
		"13;$__GL_SYNC_TO_VBLANK;__GL_SYNC_TO_VBLANK;;$nf Sync to VBLANK$end;CB;0,1;_VBLK;"
		"14;;;;$w_nv_thread;LBL;;;"
		"15;$__GL_THREADED_OPTIMIZATIONS;__GL_THREADED_OPTIMIZATIONS;;$nf Preload libpthread$end;CB;1;PTHREAD;"
		"16;;;;$w_nv_perf;LBL;;;"
		"17;$__GL_OpenGLImageSettings;__GL_OpenGLImageSettings;;$nf Nvidia graphic Performance set$end;CB;1,2,3;PERF;"
		)
		item_sep=","
		# start form display
		win_type=1
		ignore_loop=0
		extended_opts='--height=400 --scroll'
		default_win_design
		# window style and function
	}
	fn_nvidia_config_2(){
		unset basic_sets field_list chk_list track_list conf_dat #track_sets
		# window messages
		w_nv_tip0="$vB All variable are unset by default. (0) mean 'off' (1) means 'on'.$end"
		w_nv_display="$vB VBLANK can't bet set separatly when using multi screen, choose one here if needed:$end"
		w_nv_fbconfig="$vB This set the X server FBconfig behaviour (very optional):$end"
		w_nv_yield0="$vB Updating window moves yield: can be useful if some window has refresh issues:$end"
		w_nv_yield1="$nf normal yield (''), no yield (NOTHING), background (USLEEP)$end"
		w_nv_unofficial0="$vB Allow unofficial GLX implementation from appli (very optional):$end"
		w_nv_gsync="$vB If monitor can manage G-SYNC behaviour, this option could improve performance:$end"
		w_nv_glsl0="$vB This option permit to recompile GLSL and could be useful if appli is missing some extension in OpenGL sets:$end"
		# use 'get_xrandr_list' to set the connected monitor list.
		monitors_list=$(printf "${connect_[@]}"|tr '\n' '#')
		# check already setted variables
		track_list=(
		"__GL_SYNC_DISPLAY_DEVICE"
		"__GL_SORT_FBCONFIGS"
		"__GL_YIELD"
		"__GL_ALLOW_UNOFFICIAL_PROTOCOL"
		"__GL_GSYNC_ALLOWED"
		"__GL_IGNORE_GLSL_EXT_REQS")
		for trk_set in ${track_list[@]}; do
			unset conf_dat
			if [ $from_config = 1 ]; then
				trk_box=$(cat $config_file| grep "$trk_set"| sed -n "s/^\(.*=\)\(.*\)$/\2/p")
			fi
			if [ $from_config = 0 ]||[[ $trk_box == '' ]]; then
				trk_box='unset'
				conf_dat+=("$trk_set=$trk_box")
				local $conf_dat	
			fi
		done
		# var list sets
		w_title="Wine Start Config"
		w_text="$bf Configure extended Nvidia display options$end"
		basic_sets=(
		"1;;;;$w_nv_tip0;LBL;;;"
		"2;;;;;LBL;;;"
		"3;;;;$w_nv_display;LBL;;;"
		"4;$__GL_SYNC_DISPLAY_DEVICE;__GL_SYNC_DISPLAY_DEVICE;;$nf VSync display$end;CB;$monitors_list;_SYNC;"
		"5;;;;$w_nv_fbconfig;LBL;;;"
		"6;$__GL_SORT_FBCONFIGS;__GL_SORT_FBCONFIGS;;$nf Xorg FBconfig$end;CB;0,1;FBconf;"
		"7;;;;$w_nv_yield0;LBL;;;"
		"8;;;;$w_nv_yield1;LBL;;;"
		"9;$__GL_YIELD;__GL_YIELD;;$nf Window yield:$end;CB;normal,NOTHING,USLEEP;yield;"
		"10;;;;$w_nv_unofficial0;LBL;;;"
		"11;$__GL_ALLOW_UNOFFICIAL_PROTOCOL;__GL_ALLOW_UNOFFICIAL_PROTOCOL;;$nf Unofficial GL implementation$end\t\t\t;CB;0,1;UNOF_proto;"
		"12;;;;$w_nv_gsync;LBL;;;"
		"13;$__GL_GSYNC_ALLOWED;__GL_GSYNC_ALLOWED;;$nf G-Sync$end;CB;0,1;GSYNC;"
		"14;;;;$w_nv_glsl0;LBL;;;"
		"15;$__GL_IGNORE_GLSL_EXT_REQS;__GL_IGNORE_GLSL_EXT_REQS;;$nf Ignore GLGS extension check$end;CB;0,1;GLSL_rec;"
		)
		item_sep=","
		# start form display
		win_type=1
		ignore_loop=0
		extended_opts='--height=400 --scroll'
		default_win_design
		# window style and function
	}
	# base display auto-detection scripts
	get_xrandr_list(){
			unset display_ connect_ dsp_vars dsp_res_ dsp_res_list
			ifs=$IFS
			IFS=$(echo -en "\n\b")
			# give the list of connected monitors with all details
			connected_list=$(xrandr --current| grep "connected"|grep -v "disconnected")
			# give the actual primery resolution 
			current_res=$(xrandr --current| fgrep "*"| awk '{print $1}')
			n=0
			# dispatch display list in variables
			for dsp0 in ${connected_list[@]}; do
				# monitors system name
				_dsp=$(printf "$dsp0"| awk '{print $1}')
				# detect if it is primary or not
				_prm=$(printf "$dsp0"| grep -c "primary")
				# give the actual monitor resolution
				_def=$(printf "$dsp0"| grep -o "\(\w*[0-9]\{3,4\}[x]\w*[0-9]\{3,4\}\)")
				# set each monitor as variable
				display_+=("DSP_$n=$_dsp")
				# set a usable list of connected monitors
				connect_+=("$_dsp")
				# set a usable list of settings for each monitor
				# 'monitor vars;monitor name;primary;resolution'
				dsp_vars+=("$_dsp;dsp_res_$n;$_prm;$_def")
				n=$[ $n+1 ]
			done
			IFS=$ifs
	
			# set resolutions list in a script manageable lists
			d=0
			# give a list of all resolution per monitor
			for dsp1 in ${connect_[@]}; do
				query=$(xrandr -q| sed -n  "/$dsp1/,/\(\w*[A-Z]\{2,4\}\)/p"| sed -n "/\(\w*[A-Z]\{2,4\}\)/d;p"|awk '{print $1}')
				# convert result to a YAD manageable list
				query=$(printf "$query"| tr '\n' ',')
				dsp_res_+=("dsp_res_$d=$query")
				dsp_res_list+=("$query")
				d=$[ $d+1 ]
			done
			}
	fn_xrandr_config(){
		unset basic_sets field_list chk_list track_list conf_dat input_list field_line
		# create the basic_sets data to display in the yad tab
		display_field_set(){
			X=0; x=1; l=6
			monitor_filter=1
			for x_var in ${dsp_vars[@]}; do
				m_name=$(printf "$x_var"| cut -d';' -f1)
				m_res_list=$(printf "$x_var"| cut -d';' -f2)
				m_prim=$(printf "$x_var"| cut -d';' -f3)
				m_c_res=$(printf "$x_var"| cut -d';' -f4)
				reso_list=${dsp_res_list[$X]}
				monitor=$m_name
				if [ $m_prim -gt 0 ]; then
					field_msg0="$nf $m_name (primary)$end"
				else
					field_msg0="$nf $m_name$end"
				fi
				# this function can detect all attached displays, but the actual script can't manage
				# multidisplay at this state. Then, the below conditional filter is added to only
				# manage one display, the primary.
#				if [ $m_prim -gt 0 ]; then
				field_msg1="$nf Choose app resolution$end"
				field_line+=("$[ $l+$x ];$bck_mode;bck_mode;;$field_msg0;CB;$reso_list;$monitor;")
				field_line+=("$[ $l+(($x+1)) ];$set_mode;set_mode;;$field_msg1;CB;$reso_list;$monitor;")
				x=$[ $x+2 ]; X=$[ $X+1 ]
#				fi
			done
			export l=$[ $x+$l ]
			
		}
		get_pointer_list(){
			xinput_list=$(xinput list | grep "pointer"|grep -v "master\|XTEST"| \
			perl -pe "s|^.* ([A-Z].*[a-z]) (\w*[A-Z]+.*id=[0-9]*)+.*$|\1 \2|;s|([ ]*)\t|;|p")
			
			mouse_list=$(printf "${xinput_list[@]}"|cut -d';' -f1|tr '\n' ','|sed -n "s/,$//p")
		}
		get_xrd_config(){
			if [[ $trk_set == auto_set ]]; then
				if [ $trk_box = 1 ]; then
				set_output=$(printf "$set_xrandr"| cut -d' ' -f3)
				set_mode=$(printf "$set_xrandr"| cut -d' ' -f5)
#				bck_ouput=$(printf "$bck_xrandr"| cut -d' ' -f3)
				bck_mode=$(printf "$bck_xrandr"| cut -d' ' -f5)	
				else
				set_output='unset'
				set_mode='unset'
				bck_mode='unset'
				fi
			fi
			if [[ $trk_set == set_desktop_env ]]; then
				if [ $trk_box = 0 ]; then
				default_desktop='unset'
				secondary_desktop='unset'
				fi
			fi
			if [[ $trk_set == mouse_set ]]; then
				if [ $trk_box = 1 ]; then
				set_dev_id=$(printf "$mouse_btn"| cut -d' ' -f3)
				set_buttons=$(printf "$mouse_btn"| sed -n "s|^.*$set_dev_id \([0-9].*\)$|\1|p")
				else
				mouse_dev='unset'
				set_buttons='unset'
				fi
			fi
		}		
		# define the most as possible desktop enviroment name, then check if they are in bin three.
		unset dsk_unite
		desktop_prelist="cinnamon,cinnamon2d,compiz,gnome-shell,kde,lxde,marco,mate,openbox,xfce"
		desktop_prelist=( $(echo "$desktop_prelist"| tr ',' ' ') )
		for dsk_ui in ${desktop_prelist[@]}; do
			if [ $dsk_ui == 'mate' ]; then dsk_chk='marco'; else dsk_chk=$dsk_ui; fi
			if [ $(find /usr/{bin,local/bin} -name $dsk_chk| grep -c .) -gt 0 ]; then
				dsk_unite+=("$dsk_ui")
			fi
		done
		desktop_list=$(echo "${dsk_unite[*]}"| tr ' ' ',' )

		# first establish lists for seeked values
		input_vars=('set_output' 'set_mode' 'bck_mode' \
		'default_desktop' 'secondary_desktop' 'mouse_dev' 'set_buttons')
		track_list=('auto_set' 'set_desktop_env' 'mouse_set')
		# get previous config if any, but take care of unexistant modules in the file
		for trk_set in ${track_list[@]}; do
			unset conf_dat
			if [ $from_config = 1 ]; then
				trk_box=$(cat $config_file| grep "$trk_set"| sed -n "s/^\(.*=\)\(.*\)$/\2/p")
				if [[ $trk_box != '' ]]; then
					get_xrd_config
				fi
			fi
			if [ $from_config = 0 ]||[[ $trk_box == '' ]]; then
				conf_dat=("$trk_set=0")
				input_list+=("$conf_dat")
				local $conf_dat
				for def in ${input_vars[@]}; do
					conf_dat=("$def=unset")
					local $conf_dat
				done
			fi
		done
		if [[ $(printf "${input_list[0]}"| grep -c .) -gt 0 ]]; then export ${input_list[@]}; fi

		# add xrandr field to basic_sets list
		display_field_set
		# get mouse list form xinput
		get_pointer_list
		# window messages
#		w_text="$bf Configure XRandr Wine app resolution$end\\n$vb\\If you occur issues when going to fullscreen. This feature will change the default desktop resolution before the app start and then back to default when it stop. (Mostly useful for Optimus display behaviour).$end"
		w_text="$bf Configure XRandr Wine app resolution$end\\n$vb\\Special fullscreen mode issue: Change the default desktop resolution.$end"
		w_xrandr_tip="$vb\\In some cases, older game could occur issues when set in fullscreen, the options below allow to set the resolution before the start and then back to default when stop. (also useful for Optimus display behaviour).$end"
#		w_text="$bf Configure XRandr Wine app resolution$end"
		w_xrandr_tip0="$vb\\Desktop main monitor resolution is currently set to$end $nf$current_res$end"
		w_xrandr_def_dsp="$vb\\Select the output to switch to and resolution to switch back$end"
		w_xrandr_tip1="$nf Note:$end Configure connected display only. Primary doesn't necessary mean current connected monitor."
	
		w_xrandr_res_to="Choose app resolution"
		w_xrandr_res_bk="Choose the resolution to swith back"
		w_xrandr_tip2="$bf Compositing$end"
		w_xrandr_tip3="$vb\\If your desktop manager slow down graphic performance, you can try to replace the default one by a lighter.$end"
		w_xrandr_tip6="$nf Note:$end In cinnamon, desactivate compositing in fullscreen mode in System Settings menu: Preferences > General"
		w_xrandr_compo1="$nf Select the default manager$end"
		w_xrandr_compo2="$nf Select the replacement manager\t$end"
		w_xrandr_tip4="$bf\\Mouse buttons setting$end"
		w_xrandr_tip5="$vb\\If you have change the mouse button placement, replacement window manager can reverse your set. This option allow you to preserve it$end"
		w_xrandr_mouse="$nf Select the mouse device$end"
		w_xrandr_buttons="$nf Select the button preset$end"
		
		basic_sets=(
		"1;;;;;LBL;;;"
		"2;;;;$w_xrandr_tip;LBL;;;"
		"3;;;;;LBL;;;"
		"4;;;;$w_xrandr_tip0;LBL;;;"
		"5;;;;$w_xrandr_def_dsp;LBL;;;"
		"6;;;;$w_xrandr_tip1;LBL;;;"
		"${field_line[@]}"
		"$l;;;;;LBL;;;"
		"$[ $l+1 ];;;;$w_xrandr_tip3;LBL;;;"
		"$[ $l+2 ];;;;$w_xrandr_tip6;LBL;;;"
		"$[ $l+3 ];$default_desktop;default_desktop;;$w_xrandr_compo1;CBE;$desktop_list;default_desktop;"
		"$[ $l+4 ];$secondary_desktop;secondary_desktop;;$w_xrandr_compo2;CBE;$desktop_list;secondary_desktop;"
		"$[ $l+5 ];;;;;LBL;;;"
		"$[ $l+6 ];;;;$w_xrandr_tip4;LBL;;;"
		"$[ $l+7 ];;;;$w_xrandr_tip5;LBL;;;"
		"$[ $l+8 ];$mouse_dev;mouse_dev;;$w_xrandr_mouse;CB;$mouse_list;;"
		"$[ $l+9 ];$set_buttons;set_buttons;;$w_xrandr_buttons;CB;1 2 3,3 2 1;;"
		)
		
		item_sep=","
		# start form display
		win_type=1
		ignore_loop=0
#		main_opts='--height=420 --vscroll-policy=allways'
		extended_opts='--height=400 --scroll'
#		extended_opts='--scroll'
		default_win_design
		# window style and function
		
	}
	fn_optimus_config(){
#		unset basic_sets field_list chk_list track_list conf_dat input_list field_line
		unset basic_sets field_list chk_list track_list #conf_dat 
		# window messages
		w_text="$bf Optimus special options and sets$end\\n$vb\\If you own a Optimus Laptop, you can set here the dedicated commands and options.$end"
		w_text_tip="$vb\\If you own a Optimus Laptop, you can set here the dedicated commands and options usualy use by Linux Optimus manager.$end"
		w_opti_warn="$nf\\Note:$end For games, we strongly recommand to use Nvidia-Prime instead of Bumblebee. there's a few tools on the Web, Google them!"	
		w_opti_tip0="$vb\\Choice for Bumblebee can be primus or virtualgl as virtualizer.$end"
		w_opti_tip1="$nf\\Note: unset will use Bumblebee default virtualizer$end"
		w_opti_tip2="$vb\\Primus SYNC environment option is sometime useful in bad frame render$end"
		w_opti_tip3="$vb\\Vertical Sync to vblank is usualy not use because of a virtualizer issue$end"
		w_opti_starter="$nf Select the Optimus launcher\t\t\t$end"
		w_opti_opts="Set the Bumblebee (b) option"
		w_opti_accel="$nf Set the virtualizer$end"
		w_opti_sync="Set the primus SYNC option (optional)"
		w_opti_vblank="Set Vertical Sync (optional)"
		
		track_list=('opti_starter' 'opti_accel' 'opti_SYNC' 'opti_VBLK')
		if [[ "$opti_accel" != '' ]]; then opti_accel=$(echo "$opti_accel"|cut -d' ' -f2); fi
		for trk_set in ${track_list[@]}; do
			unset conf_dat
			if [ $from_config = 1 ]; then
				if [ $(cat $config_file| grep -c "$trk_set") -gt 0 ]; then
					trk_box=$(cat $config_file| grep "$trk_set"| sed -n "s/^\(.*=\)\(.*\)$/\2/p")
				else
					trk_box=0
				fi
			fi
			if [[ $from_config = 0 || $trk_box = 0 ]]; then
				trk_box='unset'
				conf_dat+=("$trk_set=$trk_box")
				local $conf_dat	
			fi
		done
		
		# var list sets
		basic_sets=(
		"1;;;;;LBL;;;"
		"2;$opti_starter;opti_starter;;$w_opti_starter;CB;optirun,primusrun;;"
		"3;;;;$w_opti_tip0;LBL;;;"
		"4;;;;$w_opti_tip1;LBL;;;"
		"5;$opti_accel;opti_accel;;$w_opti_accel;CB;virtualgl,primus;;"
		"6;;;;$w_opti_tip2;LBL;;;"
		"7;$opti_SYNC;opti_SYNC;;$w_opti_sync;CHK;;;"
		"8;;;;$w_opti_tip3;LBL;;;"
		"9;$opti_VBLK;opti_VBLK;;$w_opti_vblank;CHK;;;"
		"10;;;;;LBL;;;"
		"11;;;;$w_opti_warn;LBL;;;")
		item_sep=","
		# start form display
		win_type=1
		ignore_loop=0
#		main_opts='--height=400 --vscroll-policy=allways'
		extended_opts='--height=400 --scroll'
		default_win_design
		# window style and function
		
	}
	control_line(){
		## connection test and PoL la bianry version per arch
		unset pol_list
		line=$(nc -z 8.8.8.8 53)
		pol_list=('32,x86' '64,amd64')
		line=$?
		if [ $line = 0 ]; then
			ct_msg='On'
		else
			ct_msg='Off'
		fi
		for c in ${pol_list[@]}; do
			arch=$(printf "$c"| cut -d',' -f1)
			adir=$(printf "$c"| cut -d',' -f2)
			if [ "$ct_msg" == 'On' ]; then
				pol=$(mktemp --tmpdir pol.XXXXXXXX)
				wget -O $pol http://wine.playonlinux.com/binaries/linux-$adir.lst
				pol_x=( pol$arch=$(tac "$pol"| cut -d';' -f2| sed -n '1p' ) )
				rm -f $pol
			else
				pol_x=( pol$arch='no data available' )
			fi
			export $pol_x
		done
		sys_version=$(/usr/bin/wine --version)
	}
	key=$RANDOM
	sleep 1
	kill $YAD_PID
#	YAD_01=$(ps -A | grep "yad" | awk '{print $1}'| sed -n '1p')
	messages
	control_line
	unset active_values active_export inactive_values inactive_export cl
	if [ $from_config = 1 ]; then
		ifs=$IFS
		IFS=$(echo -en "\n\b")
		# all active values extraction with the 'export'
		active_values+=(
		$(cat $config_file | sed -n "s|^export||;s|^\(\w*[a-z].*\)=\(.*\).*$|\1=\2|p"|sed -n "s|['\|\"]||g;p")
		)
		# 'export'ed values extraction
		active_export+=( $(
		_export=$(cat $config_file | sed -n "s|^\(\w*[a-z].*\)=\(.*\).*$|\1=\2|;s|^export ||p")
		if [[ $(printf "$_export"| grep -c "__GL_THREADED_OPTIMIZATIONS") -gt 0 ]]; then
			printf "$_export"| \
			sed -n "s/\(LD_PRELOAD\).*\(__GL_THREADED_OPTIMIZATIONS=[0-9]\)/\2/i;p"
		else
			printf "$_export"
		fi ) )
		# inactives values extraction
		inactive_values+=(
		$(cat $config_file | sed -n "s|^#\(\w*[a-z].*\)=\(.*\).*$|\1=unset|p"| grep -v "export")
		)
		# inactives 'export' values extraction
		inactive_export+=(
		$(cat $config_file | sed -n "s|^#\(\w*[a-z].*\) \(.*\)=\(.*\).*$|\2=unset|p")
		)
		if [ ${#active_values} -gt 0 ]; then local "${active_values[@]}"; fi
		if [ ${#active_export} -gt 0 ]; then local "${active_export[@]}"; fi
		if [ ${#inactive_values} -gt 0 ]; then local "${inactive_values[@]}"; fi
		if [ ${#inactive_export} -gt 0 ]; then local "${inactive_export[@]}"; fi
		IFS=$ifs	
	fi
	check_list=("$_wine,_wine" "$_wbin,_wbin" "$_nvidia_1,_nvidia_1" "$_nvidia_2,_nvidia_2"
			"$w_install_exe,_install" "$_reged,_reged" "$_tricks,_tricks"
			"$_xrandr,_xrandr" "$_optimus,_optimus" "$_extended,_extended")
	for c in ${check_list[@]}; do
		c_conf=$(printf "$c"|cut -d',' -f1)
		c_none=$(printf "$c"|cut -d',' -f2)
				
		if [[ ! $c_conf =~ [0-9] ]]; then
			if [[ $c_none != _wine ]]; then cl+=($c_none=0); else cl+=($c_none=1); fi
		fi
	done
	if [ $(printf "${cl[*]}"| grep -c .) -gt 0 ]; then local "${cl[@]}"; fi
	get_xrandr_list
#	if [ $code = 0 ]; then fn_create_prefix; else fn_nvidia_config; fi
#	if [ $code = 0 ]; then if [$b_set = 1 ]; then fn_basics_config; else fn_create_prefix; fi; else fn_nvidia_config; fi
	if [ $code = 0 ]; then
		if [ $b_set = 1 ]; then fn_basics_config; else fn_create_prefix; fi
#		fn_create_prefix
	else
		fn_nvidia_config
	fi
	
}
########### MAIN ###########
export wine_bin=$(find /usr/{bin,local/bin} -name wine)
export yad_bin=$(find /usr/{bin,local/bin} -name yad)
export zen_bin=$(find /usr/{bin,local/bin} -name zenity)
export conv_bin=$(find /usr/{bin,local/bin} -name convert)
export icot_bin=$(find /usr/{bin,local/bin} -name icotool)
export wres_bin=$(find /usr/{bin,local/bin} -name wrestool)
export lpci_bin=$(find /{bin,sbin} /usr/{bin,sbin} -name lspci)
# PlayOnLinux packages download window
#select_win_bin(){ colors ; icons_set ; select_wine_bin; }
edit_reg_bin(){ colors ; icons_set ; edit_regfile; }
edit_regfile(){
#	reg_move=$(mktemp --tmpdir reg2.XXXXXXXX)
	reg_edit=$(mktemp --tmpdir reg3.XXXXXXXX)
#	reg_temp=$(mktemp --tmpdir reg4.XXXXXXXX)
	reg_display=$(cat $reg_file| perl -pe "s|\\\|\\\\\\\|g;p"| tr '*' '\n')
	
	w_text="$bf\\Register manual edit$end\\n \
$nf\\All custom maunal changes in the text area will be merge with others presets.$end"
	w_com0="$vB Custom register (manual edit).$end"
	w_com1="$rb\\Warning:$end$vb Remove all custom (set by yourself) or empty lines$end"

	reg_popup=$(
	$yad_bin --width=400 --title "$w_title" --image="$img_wine_desk_ui" \
	--window-icon="$img_wine_desk_ui" --form --text="$w_text" --separator=" " --item-separator="#" \
	--field="$w_com1":LBL '' --field="$w_com0":TXT "$reg_display")
	
	if [ $? = 0 ]; then
		printf "$reg_popup"| tr '\n' '*' > $reg_edit
		export reg_edit=$reg_edit
	else
		exit 0
	fi
	
}

select_wine_bin(){
	colors ; icons_set
	bin_class=0
	if [ $wine_elf = 1 ]; then ftp_elf='amd64'; else ftp_elf='x86'; fi
	dl_address="http://wine.playonlinux.com/binaries/linux-$ftp_elf.lst"
	site='PlayOnLinux'
	window_ico="$img_desktop"
	window_img="$img_dl_pol"
	select_wine_binary
}
select_wine_dis(){
	colors ;icons_set
	bin_class=1
	if [ $wine_elf = 1 ]; then http_elf='x86_64'; else http_elf='i686'; fi
	dl_address="https://dl.winehq.org/wine-builds/fedora/25/$http_elf/"
	site='WineHQ'
	window_ico="$img_desktop"
	window_img="$img_dl_whq"
	select_wine_binary
}
select_wine_binary(){
	unset dl_bin_list local_bin_list wine_bin_list
	if [ $wine_elf = 1 ]; then ftp_elf='amd64'; elf='64'; else ftp_elf='x86'; elf=''; fi
	# ls already insbtalled packages if any
	if [ -d $wine_path ]&&[ "$wine_path" != "$HOME" ]; then	
			local_bin_list=( $(ls -1x $wine_path/$ftp_elf) )
	fi
	if [ -s /usr/bin/wget ]; then
		# First, download wine packages list. Because Fedora repository is more simple than debian one,
		# list dosnload is done from there (i686 repo)
		file_temp=$(mktemp --tmpdir ftp1.XXXXXXXX)
		list_temp=$(mktemp --tmpdir ftp3.XXXXXXXX)
#		rpm_temp=$(mktemp --tmpdir rpm_tmp)
#		bin_temp=$(mktemp --tmpdir bin_tmp)
	#	dl_address="https://dl.winehq.org/wine-builds/fedora/25/$http_elf/"
		p_text="$vb\Retrieving $site server information$end"
		wget -O $file_temp $dl_address
		if [ $bin_class -eq 0 ]; then
			dl_bin_list=( "$(tac "$file_temp"| cut -d';' -f2)" )
		else
#			tac $file_temp| egrep "wine-staging$elf-[0-9]+"| sed -n "s/^.*$elf-\([0-9]\.[0-9]*\)-.*$http_elf.*$/\1-staging/p" > $rpm_temp
#			dl_bin_list=( "$(cat $rpm_temp)" )
			dl_bin_list=( "$(tac $file_temp| egrep "wine-staging$elf-[0-9]+"| sed -n "s/^.*$elf-\([0-9]\.[0-9]*\)-\([0-9]\).$http_elf.*$/\1-\2-staging/p")" )
		fi
		for r_bins in ${dl_bin_list[@]}; do
			out=''
			for bins in ${local_bin_list[@]}; do
				if [ $bin_class -eq 0 ]; then
					if [ $bins == $r_bins ]; then out=' *'; fi
				else
					if [ $(printf "$r_bins"| grep -c "$bins") -gt 0 ]; then out=' *'; fi
				fi
			done
			printf "$r_bins$out," >> $list_temp
		done
#		wine_bin_list=$(cat $list_temp| sed -n "s/,$//p")
		wine_bin_list=$(cat $list_temp)
		wine_bin=$($yad_bin --width=300 --title "$w_title" --image="$window_img" \
		--window-icon="$window_ico" --form --text="$w_text" --separator=" " --item-separator="," \
		--field="$vb Select $ftp_elf package from $site$end":CB "$wine_bin_list")
		
		if [ $? = 0	 ]; then
			if [ $wine_bin != '' ]; then
				printf "$wine_bin;$bin_class" > /tmp/w_bin_tmp
			fi
		else
			rm -f $file_temp $list_temp
			exit 0
		fi
		rm -f $file_temp $list_temp
	fi
}
### main ui buttons functions
## manage configs and bottles
#delete_conf(){}
## manage ui font colors
change_fonts_colors(){
	unset font_color color_fonts prev_colors prev_fonts
	sleep 1
	kill $YAD_PID
	w_text="$bf\\Basic font colors and style$end$vb\\n\
Change UI fonts colors and kind at will, but keep in mind the sens of each of them: main, warning, unavialable.$end"
	w_tip="$rb\\WARNING$end$vn: Don't select fonts with more than 2 words if it's not a \"regular\" or \"italic\", it won't be displayed correctly.\nYou can also extend window width up to 100px if the horizontal scrollbar still appears in some tabs.$end"
	font_color=$($yad_bin --width=480 --height=300 --title "$w_title" --image="$img_wine_desktop" \
			--window-icon=$img_wine_desk_ui --text "$w_text" --form --separator="|" --item-separator="," \
			--field="":LBL '' \
			--field="$vb Main messages color\t\t$end":CLR "$main" \
			--field="$vb Warning messages color$end":CLR "$warn" \
			--field="$vb Unavialable messages color$end":CLR "$freeze" \
			--field="$vb Normal font type$end":FN "$font0 $size0" \
			--field="$vb Titles font type$end":FN "$font1 $size1" \
			--field="$vb Add more width to windoow display$end":SCL "$scale,0..100" \
			--field="$w_tip":LBL '')
	if [ $? = 1 ]; then bash $bash_opt $base_script; exit 0; fi
	if [ $? = 0 ]; then
#		prev_colors=$(printf "$font_color"| sed -n "s/^,//;s/\(^.*\),,/\1/p" ) #
		prev_colors=$(printf "$font_color"| sed -n "s/^|//;s/\(^.*\)||/\1/p" ) #
		
		ifs=$IFS
		IFS='|'
		for i in ${prev_colors[@]} ; do
			color_fonts+=("$i")
			echo "$i"
		done
		echo "${color_fonts[@]}"
		IFS=$ifs
		C=0 ; D=0
		## main color/font vars
		fields=( 'main' 'warning' 'freeze' 'norm' 'big' 'scale' )
		## stick collected new vars to script vars 
		for colr in ${fields[@]}; do
			previous=${color_fonts[$C]}
			if [[ $colr == norm || $colr == big ]]; then
				## divide font block name into font name and size
				echo "$D"
				size=$(printf "$previous"| grep -o "[0-9]*")
				font=$(printf "$previous"| sed -n "s/\(^.*\) [0-9]*/\1/p")
				new_fields+=("font$D;$font")
				new_fields+=("size$D;$size")
				D=$[ $D+1 ]
			else
				new_fields+=("$colr;$previous")
			fi
			C=$[ $C+1 ]
		done
		for f in "${new_fields[@]}"; do
			cl_var=$(printf "$f"| cut -d';' -f1)
			cl_val=$(printf "$f"| cut -d';' -f2)
			perl -ni -pe "s|(^$cl_var=)'.*'$|\1'$cl_val'|i" $HOME/.winestarter/color.conf
		done
		bash $bash_opt $base_script
	fi
	exit 0
}
## get configured bottles list mandatory for other modules use.
colors ; icons_set
list_bottles(){
	if [ -d $HOME/.winestarter/configs ]; then
		if [ $(ls -1 $HOME/.winestarter/configs/| egrep -c "*[.conf]$") -gt 0 ]; then
			config_list=$(ls -1 $HOME/.winestarter/configs/| egrep "*[.conf]$")
			for config in ${config_list[@]}; do
				b_conf=$config
				b_name=$(cat $HOME/.winestarter/configs/$config| grep -w "bottle_prefix="|sed -n "s/^.*=\"\.//;s/\"//p" )
				bottle_list+=("$b_name")
				bottle+=("$b_name;$b_conf")
			done
			bottle_list=$(printf "${bottle_list[*]}"|sed -n "s/ /#/g;p")
		else
			bottle_list="none"
		fi
	fi
}
## edit or create a new desktop file entry.
edit_desktop(){
	## clear all lists
	unset desk_var_list def_list icon_id icon_def
	sleep 1
	## kill previous yad window
	kill $YAD_PID
	## define th default winestarter path
	_path_set=$HOME/.winestarter
	_img_set=$_path_set/png
	emblem_png=$_path_set/emblems/wine_emblem.png
	## define the basic vars to create a desktop file
	desk_var_list=('user_prefix' 'bottle_prefix' 'game_dir' 'game_exe' 'wine_elf')
	for d_var in ${desk_var_list[@]}; do
		_conf_set=$(cat $config_file| grep -w "$d_var"| sed -n "s/^.*=//p"|sed -n "s/[']\|[\"]//g;p")
		appli_dir_set+=("$d_var=$_conf_set")
	done
	## apply them as vars to be sued by the script
	local "${appli_dir_set[@]}"
	## extract and create thumbnails of the app icons in pngs
	ifs=$IFS
	IFS=$(echo -en "\n\b")
	# set the exe path and bin
	if [ -d $user_prefix/$bottle_prefix/drive_c/$game_dir ]; then
		exe_path="$user_prefix/$bottle_prefix/drive_c/$game_dir/$game_exe"
	else
		if [ $wine_elf = 1 ]; then elf_ext=' (x86)'; else elf_ext=''; fi
		exe_path="$user_prefix/$bottle_prefix/drive_c/Program Files$elf_ext/$game_dir/$game_exe"
	fi
	# set the icon type to extract
	ico_type=14
	# extract the icon
	$wres_bin -x -t $ico_type -o $_path_set/icons $exe_path
	exe_name=$(printf "$exe_path"| sed -n "s|^.*/||g;p")
	default_name=$(printf "$exe_name"| sed -n "s/.exe$//p")
	config_name=$(printf "$config_file"|sed -n "s|^.*/||p")
	IFS=$ifs
	# predefine category set default value. Will be overwrited if dektop file entry exist
	cat_set='unset'
	## control if there is an existing desktop file
	# define the main Desktop directoy
	DESK_DIR=$(cat $HOME/.config/user-dirs.dirs| grep "XDG_DESKTOP_DIR"| sed -n "s|\"||g;s|\$HOME|$HOME|p")
	DESK_DIR+=("$DESK_DIR")
	local $DESK_DIR
	# set the variables to extract from desktop file entry. Will be used for file creation aswell.
	desktop_vars=(
		"1,Name,5,default_name"
		"1,Comment,6,default_desc"
		"0,Exec,winestarter $config_name,default_cmd"
		"2,Icon,2,png_file"
		"0,StartupWMClass,$exe_name,exe_name"
		"1,dsk_menu,10,"
		"1,Categories,7,cat_set"
		"1,emblem,12,")
	# extract the png from the icon in multi definition format
	def_list=('256' '128' '64' '48')
	for _def in ${def_list[@]}; do
		# look for index for the asked definition
		idx=$($icot_bin -l $_path_set/icons/$exe_name\_$ico_type\_*.ico| \
		grep "\(width=$_def\).*\(bit-depth=32\)"| sed -n "s/^.*--index=\([0-9]\).*$/\1/g;p")
		if [[ $idx > 0 ]]; then
			$icot_bin -x -i $idx -o $_path_set/png $_path_set/icons/$exe_name\_$ico_type\_*.ico
			png_file=$(ls -1 $_path_set/png/$exe_name\_$ico_type*\_$_def\x$_def*.png)
			thb_file=$_path_set/png/thumb/$(printf "$png_file"| sed -n "s/^.*\///g;p")
			# create thumbnail for yad UI
			$conv_bin $png_file -scale 48x48 $thb_file
			# make def field readable
			png_def="$_def"x"$_def"
			icon_id+=("$thb_file")
			icon_id+=("$png_file")
			icon_id+=("$png_def")
			icon_def+=("$png_file,$png_def")
		fi
	done
	# extract the desktop file entry variables if any and make usable by the script
	if [ -e $XDG_DESKTOP_DIR/$exe_name.desktop ]; then
		for p_dsk in "${desktop_vars[@]}"; do
			ex_desktop=$(printf "$p_dsk"| cut -d',' -f2)
			ex_script=$(printf "$p_dsk"| cut -d',' -f4)
			desk_entry=$(cat $XDG_DESKTOP_DIR/$exe_name.desktop| grep "$ex_desktop"| \
			sed -n "s/^\(.*\w*[a-z]=\)\(.*\)$/\2/p")
			if [[ $ex_script != '' ]]; then
				def_entry+=($ex_script="$desk_entry")
			fi
		done
		local "${def_entry[@]}"
		## add the desktop icon to the icon list if extracted from the desktop file entry
		# make a thumbnail for yad UI
		thb_file=$_path_set/png/thumb/$(printf "$png_file"| sed -n "s/^.*\///g;p")
		$conv_bin $png_file -scale 48x48 $thb_file
		# get image dimensions
		png_def=$(file $png_file | perl -pe "s| ||g;s|^.*,([0-9]*.*)x([0-9]*.*),[0-9].*$|\1x\2|p")
		# add it to the list
		icon_id+=("$thb_file")
		icon_id+=("$png_file")
		icon_id+=("existing desktop file entry")
		icon_def+=("$png_file,$png_def")
	fi 
	## window messages and tips
	w_text="$bf Create a dedicated desktop file$end \\n \
$vb You can create or modify every main fields of a desktop file$end"
	w_tip0="$vb\Select an icon for you desktop file from the right list$end"
	w_tip1="$vb\Choose or edit a display name, a description and a menu category for the desktop file$end"
	w_tip2="$vb\By default, desktop entry is add to the deskop only $end"
	w_tip3="$vb\Winestarter automatical add a Wine emblem to easely detach its managed softwares. You can remove it by unsetting the check box here.$end"
	## create paned window and send result to associated temp files
	key=$RANDOM
	temp1=$(mktemp --tmpdir tab1.XXXXXXXX)
	temp2=$(mktemp --tmpdir tab2.XXXXXXXX)
	# editable categories list for Category entry combo box
	categories='Games;#Office;#Applications;#Games;#Multimedia;#Video;#Graphics;'
	# select_pan part
	$yad_bin --width=370 --height=300 --plug=$key --tabnum=1 --form --image=$img_wine_desktop \
			 --item-separator="#" --field="":LBL '' \
			--field="$w_tip0":LBL '' \
			--field="":LBL '' \
			--field="$w_tip1":LBL '' \
			--field="$vb Name$end":CBE "$default_name" \
			--field="$vb Comment$end":CBE "$default_desc" \
			--field="$vb Category$end":CBE "$cat_set#$categories" \
			--field="":LBL '' \
			--field="$w_tip2":LBL '' \
			--field="Add the dessktop entry to the dedicated type menu":CHK TRUE \
			--field="$w_tip3":LBL '' \
			--field="Add a Wine sticky emblem in top right corner":CHK TRUE \
			--separator=',' &> $temp1 &
	# icon_pan part
	$yad_bin --width=60 --height=300 --plug=$key --tabnum=2 --list \
			--tooltip-column=3 --hide-column=3 --no-rules-hint --separator=',' \
			--column='icon list':IMG --column='path':HD --column='tip':TIP \
			"${icon_id[@]}" &> $temp2 &
	# main paned window
	$yad_bin --width=480 --height=300 --title "$w_title" --window-icon=$img_wine_desk_ui \
	--text "$w_text" --paned --key=$key --orient=hor --splitter=380
	if [ $? = 1 ]; then exit 0; fi
	## extract setted variable from temp files
	# create a new temp file if creating a new desktop file
	temp3=$(mktemp --tmpdir desktop.XXXXXXXX)
	# order temp file by variable raws
	tmp_files=("0," "1,$temp1" "2,$temp2")
	rk=0
	for tmp in ${tmp_files[@]}; do
		tp_rk=$(printf "$tmp"| cut -d',' -f1)
		tp_fl=$(printf "$tmp"| cut -d',' -f2)
		if [ $rk -eq $tp_rk ]; then
			#make sure data come from temp file or not
			if [ $tp_fl	!= '' ]&&[ -e $tp_fl ]; then
				tmp_data=$(cat $tp_fl)
			fi
			for t_vars in "${desktop_vars[@]}"; do
				tmp_rank=$(printf "$t_vars"| cut -d',' -f1)
				dsk_var=$(printf "$t_vars"| cut -d',' -f2)
				dsk_rank=$(printf "$t_vars"| cut -d',' -f3)
				#control again if data come from temp file or not, then apply correct filter
				if [ $tmp_rank = $tp_rk ]&&[[ $dsk_rank != '' ]]; then
					if [ $tp_fl	!= '' ]&&[ -e $tp_fl ]; then
						dsk_field=$(printf "$tmp_data"|cut -d',' -f$dsk_rank)
					else
						dsk_field=$dsk_rank
					fi
					desktop_field+=("$dsk_var=$dsk_field")
				fi
			done
			rk=$[ $rk+1 ]
		fi
	done
	convert_icon=0
	# take emblem png definition from file
	emblem_def=$(file $emblem_png| perl -pe "s| ||g;s|^.*,([0-9]*.*)x([0-9]*.*),[0-9].*$|\1x\2|p")
	## parse now data to desktop entry
	for keys in "${desktop_field[@]}"; do
		fld_var=$(printf "$keys"| cut -d'=' -f1)
		fld_entry=$(printf "$keys"| cut -d'=' -f2)
		# if emblem overlay is selected, check vlaue first before telling to script to create 
		# the overlay at the next loop.
		if [ "$fld_entry" == TRUE ]; then
			if [ "$fld_var" == emblem ]; then convert_icon=1; else convert_icon=0; fi
			if [ "$fld_var" == dsk_menu ]; then menu_entry=1; else menu_entry=0; fi
		fi
		# next loop create the overlay if set.
		if [[ "$fld_var" == Icon && $convert_icon = 1 ]]; then
			for l_png in ${icon_def[@]}; do
				png=$(printf "$l_png"| cut -d',' -f1)
				def=$(printf "$l_png"| cut -d',' -f2)
				if [ $png == $fld_entry ]; then
					if [ $(printf "$fld_entry"| grep -c "$emblem_def") = 0 ]; then
						scale="-scale $def"
					fi
				fi
			done
			$conv_bin $fld_entry $emblem_png $scale -composite $_img_set/$exe_name.png
			fld_entry=$_img_set/$exe_name.png
			keys="$fld_var=$fld_entry"
		fi
		# control if this is an edit from existing file and then apply correct filter
		if [ -a $XDG_DESKTOP_DIR/$exe_name.desktop ]; then
			perl -ni -pe "s|^($fld_var=)(.*)$|\1$fld_entry|i" $XDG_DESKTOP_DIR/$exe_name.desktop
			if [ $menu_entry = 1 ]&&[ $HOME/.local/share/applications/$exe_name.desktop ]; then
				perl -ni -pe "s|^($fld_var=)(.*)$|\1$fld_entry|i" \
				$HOME/.local/share/applications/$exe_name.desktop
			fi
		else
			if ! [[ $fld_var == emblem || $fld_var == dsk_menu ]]; then printf "$keys\n" >> $temp3; fi
		fi
	done
	# for complete new desktop file entry creation add first line headers in first place. 
	if [ ! -f $XDG_DESKTOP_DIR/$exe_name.desktop ]; then
		printf "[Desktop Entry]\nEncoding=UTF-8\nType=Application\n" > $XDG_DESKTOP_DIR/$exe_name.desktop
		cat $temp3 >> $XDG_DESKTOP_DIR/$exe_name.desktop
		chmod 755 $XDG_DESKTOP_DIR/$exe_name.desktop
		if [ $menu_entry = 1 ]; then
			touch $HOME/.local/share/applications/$exe_name.desktop
			cat $XDG_DESKTOP_DIR/$exe_name.desktop > $HOME/.local/share/applications/$exe_name.desktop
			chmod 755 $HOME/.local/share/applications/$exe_name.desktop
		fi
	fi
	# all done, bye bye.
	exit 0
}
edit_bottle(){
	unset more_value
	sleep 1
	kill $YAD_PID
	list_bottles
	if [ $desktop_file = 1 ]; then
		if [ $rstart = 1 ]; then
		w_text="$bf Restart function system$end$vb\\n \
You can here restart Winecfg or Winetricks at next Winestarter launch. This feature could be really useful after a Wine update or just to control Winecfg state$end"
		win_icon=$img_wine_restart
		edit_win=$($yad_bin --width=420 --title "$w_title" --image=$img_wine_reload \
			--window-icon=$img_desktop --center --separator=';' --form --item-separator="#" \
			--align=left --text "$w_text" --field="":LBL '' \
			--field="$vb Select a Wine bottle$end":CB "$bottle_list" \
			--field="Relaunch Winecfg UI":CHK 'FALSE' \
			--field="Restart Winetricks process":CHK 'FALSE')
		else
		w_text="$bf Wine bottle desktop file edition$end$vb\\n \
Select the bottle you would like for a desktop file$end"
		win_icon=$img_wine_desk_ui
		edit_win=$($yad_bin --width=420 --title "$w_title" --image=$win_icon \
			--window-icon=$img_desktop --center --separator=';' --form --item-separator="#" \
			--align=left --text "$w_text" --field="":LBL '' \
			--field="$vb Select a Wine bottle$end":CB "$bottle_list" \
			)
		fi	
	else
		win_icon=$img_wine_ui
		unset nv_field nv_list
		if [ $($lpci_bin| grep -c "NVIDIA") -gt 0 ]; then
			nv_field+=("--field=:LBL")
			nv_list+=('')
			nv_field+=("--field=$vb Select a Wine bottle$end:CB")
			nv_list+=("$bottle_list")
			nv_field+=("--field=$vb Select edit option$end:CB")
			nv_list+=('Edit the whole bottle#Edit config file directly#Edit Nvidia options only')
			w_text="$bf Wine bottle edition$end$vb\\n \
You can choose between edit a entire bottle or the Nvidia OpenGL environment options only$end"
		else
			w_text="$bf Wine bottle edition$end$vb\\n \
Select the Wne bottle to edit$end"
			nv_field+=("--field=:LBL")
			nv_list+=('')
			nv_field+=("--field=$vb Select a Wine bottle$end:CB")
			nv_list+=("$bottle_list")
			nv_field+=("--field=$vb Select edit option$end:CB")
			nv_list+=('Edit the whole bottle#Edit config file directly')
		fi
		edit_win=$($yad_bin --width=420 --title "$w_title" --image=$win_icon \
		--window-icon=$img_desktop --center --separator=';' --form --item-separator="#" \
		--align=left --text "$w_text" "${nv_field[@]}" "${nv_list[@]}")
	fi
	if [ $? = 1 ]; then exit 0; fi
	_edit_bottle=$(printf "${edit_win[@]}"| cut -d';' -f2)
	config_file=$HOME/.winestarter/configs/$_edit_bottle.conf
	if [ $desktop_file = 0 ]; then
#		_all_wine=$(printf "${edit_win[@]}"| cut -d';' -f3)
#		_nv_only=$(printf "${edit_win[@]}"| cut -d';' -f4)
#		[[ $_all_wine == TRUE ]]&& code=0
#		[[ $_nv_only == TRUE ]]&& code=1
		if [ $(printf "${edit_win[@]}"| grep -c "Nvidia") -gt 0 ];then
			code=1; else code=0
		fi
		
	fi
	
	if [ $rstart = 1 ]; then
		_winecfg=$(printf "${edit_win[@]}"| cut -d';' -f3)
		_winetrk=$(printf "${edit_win[@]}"| cut -d';' -f4)
		[[ $_winecfg == TRUE ]]&& perl -ni -pe "s|^(w_config)=([0-9])$|\1=1|i" $config_file
		[[ $_winetrk == TRUE ]]&& perl -ni -pe "s|^(w_install_tricks)=([0-9])$|\1=1|i" $config_file
		exit 0
	fi
	if [ -e $HOME/.winestarter/configs/$_edit_bottle.conf ]; then
		## if previous option is config file direct edit, launch zenity text edit and exit.
		if [ $(printf "${edit_win[@]}"| grep -c "directly") -gt 0 ];then
			e_text="$bf\\Fast Config Edit$end\n This editor is for quick config edits. All '##' comments are removable if you're confortable without them, but we don't recommand it."
#			$zen_bin --width=800 --height=600 --title="$w_title" --window-icon=$img_wine_desk_ui \
#			--text-info  --text="$e_text" --checkbox="Confirm overwrite" \
#			--editable --filename=$config_file
			edit_config=$($yad_bin --width=800 --height=600 --title="$w_title" \
			--window-icon=$img_wine_desk_ui --text-info  --text="$vb$e_text$end" \
			--editable --filename=$config_file)
			if [ $? = 1 ]; then
				exit 0
			else
				echo "$edit_config" > $config_file
			fi
			exit 0
			
		fi
		from_config=1
		export from_config=$from_config config_file=$config_file
		## check if selection is desktop file entry or not
		if [ $desktop_file = 1 ]; then
			bash $bash_opt "colors; icons_set; edit_desktop"
		else
			bash $bash_opt "colors; icons_set; code=$code; main_code"
		fi
	else
		exit 0
	fi
	exit 0
}

## Script debug options
#bash_opt='-x -c'
bash_opt='-c'
## Main button commands
main_cmd_0="bash $bash_opt \"colors; icons_set; b_set=1; code=0; from_config=0; main_code\""
main_cmd_1="bash $bash_opt \"colors; icons_set; b_set=0; from_config=1; desktop_file=0; rstart=0; edit_bottle\""
main_cmd_2="bash $bash_opt \"colors; icons_set; from_config=1; desktop_file=1; rstart=0; edit_bottle\""
main_cmd_3="bash $bash_opt \"colors; icons_set; change_fonts_colors\""
main_cmd_4="bash $bash_opt \"colors; icons_set; from_config=1; desktop_file=1; rstart=1; edit_bottle\""

the_big_button="$HOME/.winestarter/png/defaults/winestarter_128.png"

main_text3="$vb\\Create$end"
main_text4="$vb\\Modify$end"

list_bottles
#messages; main_code
main_text0="$bf\\Stay simple with yours Wine bottles$end $vb\\\"Don't be a clic machine !\"$end\\n\\n\
$vb\\What do you want to do?$end\\n$vn(Hover buttons show tooltips)$end"

export -f colors icons_set
export -f main_code edit_bottle edit_desktop list_bottles change_fonts_colors select_wine_bin select_wine_dis select_wine_binary edit_reg_bin edit_regfile
export w_title="winestarter configurator" base_script="$0" bash_opt="$bash_opt"
$yad_bin --width=482 --title "Winestarter configurator"  --window-icon=$img_wine_desk_ui --no-buttons \
--form --text="$main_text0" --image=$the_big_button \
--field="":LBL '' \
--field="$main_text3":LBL '' \
--field="$vb New Wine prefix $end"!$img_wine_add!"Create and config a fresh new Wine prefix":FBTN "$main_cmd_0" \
--field="$main_text4":LBL '' \
--field="$vb Edit a Wine bottle$end"!$img_wine_mod!"Add or change features, options, etc in an existing Wine bottle":FBTN "$main_cmd_1" \
--field="$vb Edit or create a Desktop file$end"!$img_wine_desk_bt!"Create a new or modify an existing Wine bottle Desktop file":FBTN "$main_cmd_2" \
--field="$vb Change fonts colors$end"!$img_wine_colors!"If you occur issues with default fonts colors, you can change them here":FBTN "$main_cmd_3" \
--field="$vb Restart features$end"!$img_wine_restart!"You can restart here some functions at next launch, ex: winecfg":FBTN "$main_cmd_4"

exit 0

